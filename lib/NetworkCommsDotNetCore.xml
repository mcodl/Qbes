<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NetworkCommsDotNetCore</name>
  </assembly>
  <members>
    <member name="T:NetworkCommsDotNet.ConnectionState">
      <summary>
            Describes the current state of the connection
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionState.Undefined">
      <summary>
            The state of this connection is undefined. This is the starting state of new connections.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionState.Establishing">
      <summary>
            The connection is in the process of being established.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionState.Established">
      <summary>
            The connection has been succesfully established.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionState.Shutdown">
      <summary>
            The connection has been shutdown.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.ConnectionInfo">
      <summary>
            Contains any information related to the configuration of a <see cref="T:NetworkCommsDotNet.Connection" /> object.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifierStr">
      <summary>
            We store our unique peer identifier as a string so that it can be easily serialised.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor">
      <summary>
            Private constructor required for deserialisation.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.Net.IPEndPoint)">
      <summary>
            Create a new ConnectionInfo object pointing at the provided remote <see cref="T:System.Net.IPEndPoint" /></summary>
      <param name="remoteEndPoint">The end point corresponding with the remote target</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.String,System.Int32)">
      <summary>
            Create a new ConnectionInfo object pointing at the provided remote ipAddress and port. Provided ipAddress and port are parsed in to <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" />.
            </summary>
      <param name="remoteIPAddress">IP address of the remote target in string format, e.g. "192.168.0.1"</param>
      <param name="remotePort">The available port of the remote target. 
            Valid ports are 1 through 65535. Port numbers less than 256 are reserved for well-known services (like HTTP on port 80) and port numbers less than 1024 generally require admin access</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(NetworkCommsDotNet.ConnectionType,NetworkCommsDotNet.ShortGuid,System.Net.IPEndPoint,System.Boolean)">
      <summary>
            Create a connectionInfo object which can be used to inform a remote peer of local connectivity
            </summary>
      <param name="connectionType">The type of connection</param>
      <param name="localNetworkIdentifier">The local network identifier</param>
      <param name="localEndPoint">The localEndPoint which should be referenced remotely</param>
      <param name="isConnectable">True if connectable on provided localEndPoint</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.Boolean,NetworkCommsDotNet.ConnectionType,System.Net.IPEndPoint)">
      <summary>
            Create a connectionInfo object for a new connection.
            </summary>
      <param name="serverSide">True if this connection is being created serverSide</param>
      <param name="connectionType">The type of connection</param>
      <param name="remoteEndPoint">The remoteEndPoint of this connection</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.#ctor(System.Boolean,NetworkCommsDotNet.ConnectionType,System.Net.IPEndPoint,System.Net.IPEndPoint)">
      <summary>
            Create a connectionInfo object for a new connection.
            </summary>
      <param name="serverSide">True if this connection is being created serverSide</param>
      <param name="connectionType">The type of connection</param>
      <param name="remoteEndPoint">The remoteEndPoint of this connection</param>
      <param name="localEndPoint">The localEndpoint of this connection</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.NoteStartConnectionEstablish">
      <summary>
            Marks the connection as establishing
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.NoteCompleteConnectionEstablish">
      <summary>
            Set this connectionInfo as established.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.NoteConnectionShutdown">
      <summary>
            Note this connection as shutdown
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.UpdateLocalEndPointInfo(System.Net.IPEndPoint)">
      <summary>
            Update the localEndPoint information for this connection
            </summary>
      <param name="localEndPoint">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.UpdateInfoAfterRemoteHandshake(NetworkCommsDotNet.ConnectionInfo,System.Net.IPEndPoint)">
      <summary>
            During a connection handShake we might be provided with more update information regarding endPoints, connectability and identifiers
            </summary>
      <param name="handshakeInfo">
        <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> provided by remoteEndPoint during connection handshake.</param>
      <param name="remoteEndPoint">The correct remoteEndPoint of this connection.</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.UpdateLastTrafficTime">
      <summary>
            Updates the last traffic time for this connection
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.ResetNetworkIdentifer(NetworkCommsDotNet.ShortGuid)">
      <summary>
            Replaces the current networkIdentifier with that provided
            </summary>
      <param name="networkIdentifier">The new networkIdentifier for this connectionInfo</param>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.ResetConnectionInfo">
      <summary>
            A connectionInfo object may be used across multiple connection sessions, i.e. due to a possible timeout. 
            This method resets the state of the connectionInfo object so that it may be reused.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.Equals(System.Object)">
      <summary>
            Compares this <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> object with obj and returns true if obj is ConnectionInfo and both the <see cref="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier" /> and <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> match.
            </summary>
      <param name="obj">The object to test of equality</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.Equals(NetworkCommsDotNet.ConnectionInfo)">
      <summary>
            Compares this <see cref="T:NetworkCommsDotNet.ConnectionInfo" /> object with other and returns true if both the <see cref="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier" /> and <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> match.
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.op_Equality(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.ConnectionInfo)">
      <summary>
            Returns left.Equals(right)
            </summary>
      <param name="left">Left connectionInfo</param>
      <param name="right">Right connectionInfo</param>
      <returns>True if both are equal, otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.op_Inequality(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.ConnectionInfo)">
      <summary>
            Returns !left.Equals(right)
            </summary>
      <param name="left">Left connectionInfo</param>
      <param name="right">Right connectionInfo</param>
      <returns>True if both are different, otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.GetHashCode">
      <summary>
            Returns NetworkIdentifier.GetHashCode() ^ RemoteEndPoint.GetHashCode();
            </summary>
      <returns>The hashcode for this connection info</returns>
    </member>
    <member name="M:NetworkCommsDotNet.ConnectionInfo.ToString">
      <summary>
            Returns a string containing suitable information about this connection
            </summary>
      <returns>A string containing suitable information about this connection</returns>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionType">
      <summary>
            The type of this connection
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.IsConnectable">
      <summary>
            True if the <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> is connectable.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionCreationTime">
      <summary>
            The DateTime corresponding to the creation time of this connection object
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.ServerSide">
      <summary>
            True if connection was originally established by remote
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionEstablishedTime">
      <summary>
            The DateTime corresponding to the creation time of this connection object
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.LocalEndPoint">
      <summary>
            The <see cref="T:System.Net.IPEndPoint" /> corresponding to the local end of this connection.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint">
      <summary>
            The <see cref="T:System.Net.IPEndPoint" /> corresponding to the remote end of this connection.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.ConnectionState">
      <summary>
            Describes the current state of the connection
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.NetworkIdentifier">
      <summary>
            Returns the networkIdentifier of this peer as a ShortGuid. If the NetworkIdentifier has not yet been set returns ShortGuid.Empty.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ConnectionInfo.LastTrafficTime">
      <summary>
            The DateTime corresponding to the time data was sent or received
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.Connection">
      <summary>
            Global connection base class for NetworkCommsDotNet. Most user interactions happen using a connection object. Extended by <see cref="T:NetworkCommsDotNet.TCPConnection" /> and <see cref="T:NetworkCommsDotNet.UDPConnection" />.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.connectionSetupWait">
      <summary>
            A manual reset event which can be used to handle connection setup and establish.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.connectionEstablishWait">
      <summary>
            A manual reset event which can be used to handle connection setup and establish.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.connectionSetupException">
      <summary>
            A boolean used to signal a connection setup exception.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.connectionSetupExceptionStr">
      <summary>
            If <see cref="F:NetworkCommsDotNet.Connection.connectionSetupException" /> is true provides additional exception information.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.delegateLocker">
      <summary>
            Thread safety locker which is used when accessing <see cref="F:NetworkCommsDotNet.Connection.incomingPacketHandlers" />, <see cref="F:NetworkCommsDotNet.Connection.incomingPacketUnwrappers" /> and <see cref="P:NetworkCommsDotNet.Connection.ConnectionSpecificShutdownDelegate" />.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.incomingPacketUnwrappers">
      <summary>
            By default all incoming objects are handled using ConnectionDefaultSendReceiveOptions. Should the user want something else
            those settings are stored here
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.incomingPacketHandlers">
      <summary>
            A connection specific incoming packet handler dictionary. These are called before any global handlers
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.packetBuilder">
      <summary>
            The <see cref="T:NetworkCommsDotNet.PacketBuilder" /> for this connection
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.dataBuffer">
      <summary>
            The current incoming data buffer
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.totalBytesRead">
      <summary>
            The total bytes read so far within dataBuffer
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.incomingDataListenThread">
      <summary>
            The thread listening for incoming data should we be using synchronous methods.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.sendLocker">
      <summary>
            Lockers for maintaing thread safe operation
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.SendTimesMSPerKBCache">
      <summary>
            A comms math oject for tracking send times. Used to prevent send deadlocks.
            Initialisated at 1000 milliseconds per KB write speed, corresponding with 1KB / second.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.packetSequenceCounter">
      <summary>
            A counter which is incremented during every a send. The current value is included in the header of all sent packets.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.Connection.sentPacketsLocker">
      <summary>
            Maintains a list of sent packets for the purpose of confirmation and possible resends.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Create a new connection object
            </summary>
      <param name="connectionInfo">ConnecitonInfo corresponding to the new connection</param>
      <param name="defaultSendReceiveOptions">The SendReceiveOptions which should be used as connection defaults</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.EstablishConnection">
      <summary>
            Establish this connection
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.EstablishConnectionSpecific">
      <summary>
            Any connection type specific establish tasks. Base should be called to trigger connection establish delegates
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.WaitForConnectionEstablish(System.Int32)">
      <summary>
            Return true if the connection is established within the provided timeout, otherwise false
            </summary>
      <param name="waitTimeoutMS">Wait time in milliseconds before returning</param>
      <returns>True if the wait was triggered, false otherwise after the provided timeout.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ConnectionSetupHandler(System.IO.MemoryStream)">
      <summary>
            Handle an incoming ConnectionSetup packet type
            </summary>
      <param name="packetDataSection">Serialised handshake data</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ConnectionSetupHandlerFinal(NetworkCommsDotNet.ConnectionInfo,System.Boolean@,NetworkCommsDotNet.Connection@)">
      <summary>
            Attempts to complete the connection establish with a minimum of locking to prevent possible deadlocking
            </summary>
      <param name="remoteConnectionInfo">
        <see cref="P:NetworkCommsDotNet.Connection.ConnectionInfo" /> corresponding with remoteEndPoint</param>
      <param name="possibleClashConnectionWithPeer_ByEndPoint">True if a connection already exists with provided remoteEndPoint</param>
      <param name="existingConnection">A reference to an existing connection if it exists</param>
      <returns>True if connection is successfully setup, otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ToString">
      <summary>
            Returns ConnectionInfo.ToString
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.IncomingPacketSendReceiveOptions(NetworkCommsDotNet.PacketHeader)">
      <summary>
            Returns the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used for the provided <see cref="T:NetworkCommsDotNet.PacketHeader" />. Ensures there will not be a serializer / data processor clash for different delegate levels.
            </summary>
      <param name="header">The <see cref="T:NetworkCommsDotNet.PacketHeader" /> options are desired.</param>
      <returns>The requested <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.TriggerSpecificPacketHandlers(NetworkCommsDotNet.PacketHeader,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Trigger connection specific packet delegates with the provided parameters. Returns true if connection specific handlers were executed.
            </summary>
      <param name="packetHeader">The packetHeader for which all delegates should be triggered with</param>
      <param name="incomingObjectBytes">The serialised and or compressed bytes to be used</param>
      <param name="options">The incoming sendReceiveOptions to use overriding defaults</param>
      <returns>Returns true if connection specific handlers were executed.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.PacketTypeUnwrapperOptions(System.String)">
      <summary>
            Returns the packet type sendReceiveOptions possibly used to unwrap incoming data. If no specific options are registered returns null
            </summary>
      <param name="packetTypeStr">The packet type for which the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> are required.</param>
      <returns>The requested <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> otherwise null</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.AppendIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0},NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Append a connection specific packet handler
            </summary>
      <typeparam name="T">The type of incoming object</typeparam>
      <param name="packetTypeStr">The packet type for which this handler will be executed</param>
      <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
      <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used for the provided packet type</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.IncomingPacketHandlerExists(System.String)">
      <summary>
            Returns true if a packet handler exists for the provided packet type, on this connection
            </summary>
      <param name="packetTypeStr">The packet type for which to check incoming packet handlers</param>
      <returns>True if a packet handler exists</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.IncomingPacketHandlerExists(System.String,System.Delegate)">
      <summary>
            Returns true if the provided packet handler has been added for the provided packet type, on this connection.
            </summary>
      <param name="packetTypeStr">The packet type within which to check packet handlers</param>
      <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
      <returns>True if a global packet handler exists for the provided packetType</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.RemoveIncomingPacketHandler(System.String,System.Delegate)">
      <summary>
            Remove the provided delegate for the specified packet type
            </summary>
      <param name="packetTypeStr">Packet type for which this delegate should be removed</param>
      <param name="packetHandlerDelgatePointer">The delegate to remove</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.RemoveIncomingPacketHandler(System.String)">
      <summary>
            Removes all delegates for the provided packet type
            </summary>
      <param name="packetTypeStr">Packet type for which all delegates should be removed</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.RemoveIncomingPacketHandler">
      <summary>
            Removes all delegates for all packet types
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.AppendShutdownHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
      <summary>
            Add a connection specific shutdown delegate
            </summary>
      <param name="handlerToAppend">The delegate to call when a connection is shutdown</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.RemoveShutdownHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
      <summary>
            Remove a connection specific shutdown delegate.
            </summary>
      <param name="handlerToRemove">The delegate to remove for shutdown events</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.StartIncomingDataListen">
      <summary>
            A connection specific method which triggers any requisites for accepting incoming data
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.IncomingPacketHandleHandOff(NetworkCommsDotNet.PacketBuilder)">
      <summary>
            Attempts to use the data provided in packetBuilder to recreate something usefull. If we don't have enough data yet that value is set in packetBuilder.
            </summary>
      <param name="packetBuilder">The <see cref="T:NetworkCommsDotNet.PacketBuilder" /> containing incoming cached data</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.CheckSumFailResendHandler(System.IO.MemoryStream)">
      <summary>
            Handle an incoming CheckSumFailResend packet type
            </summary>
      <param name="packetDataSection">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendObject(System.String,System.Object)">
      <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></summary>
      <param name="sendingPacketType">The sending packet type</param>
      <param name="objectToSend">The object to send</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendObject(System.String,System.Object,System.Int64@)">
      <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></summary>
      <param name="sendingPacketType">The sending packet type</param>
      <param name="objectToSend">The object to send</param>
      <param name="packetSequenceNumber">The sequence number of the packet sent</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendObject(System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Send an object using the provided SendReceiveOptions
            </summary>
      <param name="sendingPacketType">The packet type to use for send</param>
      <param name="objectToSend">The object to send</param>
      <param name="options">Send specific <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendObject(System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions,System.Int64@)">
      <summary>
            Send an object using the provided SendReceiveOptions
            </summary>
      <param name="sendingPacketType">The packet type to use for send</param>
      <param name="objectToSend">The object to send</param>
      <param name="options">Send specific <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /></param>
      <param name="packetSequenceNumber">The sequence number of the packet sent</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendObject(System.String)">
      <summary>
            Send an empty packet using the provided packetType. Usefull for signalling.
            </summary>
      <param name="sendingPacketType">The sending packet type</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendObject(System.String,System.Int64@)">
      <summary>
            Send an empty packet using the provided packetType. Usefull for signalling.
            </summary>
      <param name="sendingPacketType">The sending packet type</param>
      <param name="packetSequenceNumber">The sequence number of the packet sent</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendReceiveObject``1(System.String,System.String,System.Int32,System.Object)">
      <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
      <typeparam name="returnObjectType">The type of return object</typeparam>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
      <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
      <param name="sendObject">The object to send</param>
      <returns>The requested return object</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendReceiveObject``1(System.String,System.String,System.Int32,System.Object,System.Int64@)">
      <summary>
            Send an object using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
      <typeparam name="returnObjectType">The type of return object</typeparam>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
      <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
      <param name="sendObject">The object to send</param>
      <param name="sentPacketSequenceNumber">The sequence number of the packet sent</param>
      <returns>The requested return object</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendReceiveObject``1(System.String,System.String,System.Int32,System.Object,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Send an object using the provided <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object using provided <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
      <typeparam name="returnObjectType">The type of return object</typeparam>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
      <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
      <param name="sendObject">The object to send</param>
      <param name="sendOptions">SendReceiveOptions to use when sending</param>
      <param name="receiveOptions">SendReceiveOptions used when receiving the return object</param>
      <returns>The requested return object</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendReceiveObject``1(System.String,System.String,System.Int32,System.Object,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.SendReceiveOptions,System.Int64@)">
      <summary>
            Send an object using the provided <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object using provided <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />.
            </summary>
      <typeparam name="returnObjectType">The type of return object</typeparam>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
      <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
      <param name="sendObject">The object to send</param>
      <param name="sendOptions">SendReceiveOptions to use when sending</param>
      <param name="receiveOptions">SendReceiveOptions used when receiving the return object</param>
      <param name="sentPacketSequenceNumber">The sequence number of the packet sent</param>
      <returns>The requested return object</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendReceiveObject``1(System.String,System.String,System.Int32)">
      <summary>
            Send an empty packet using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />. Usefull to request an object when there is no need to send anything.
            </summary>
      <typeparam name="returnObjectType">The type of return object</typeparam>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
      <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendReceiveObject``1(System.String,System.String,System.Int32,System.Int64@)">
      <summary>
            Send an empty packet using the connection default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> and wait for a returned object again using default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" />. Usefull to request an object when there is no need to send anything.
            </summary>
      <typeparam name="returnObjectType">The type of return object</typeparam>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="expectedReturnPacketTypeStr">The packet type which will be used for the reply</param>
      <param name="returnPacketTimeOutMilliSeconds">A timeout in milliseconds after which if not reply is received will throw an ExpectedReturnTimeoutException.</param>
      <param name="sentPacketSequenceNumber">The sequence number of the packet sent</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.CloseConnection(System.Boolean,System.Int32)">
      <summary>
            Closes the connection and trigger any associated shutdown delegates.
            </summary>
      <param name="closeDueToError">Closing a connection due an error possibly requires a few extra steps.</param>
      <param name="logLocation">Optional debug parameter.</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.CloseConnectionSpecific(System.Boolean,System.Int32)">
      <summary>
            Every connection will probably have to perform connection specific shutdown tasks. This is called before the global connection close tasks.
            </summary>
      <param name="closeDueToError">Closing a connection due an error possibly requires a few extra steps.</param>
      <param name="logLocation">ptional debug parameter.</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ConnectionAlive">
      <summary>
            Uses the current connection and returns a bool dependant on the remote end responding to a SendReceiveObject call within the default <see cref="P:NetworkCommsDotNet.NetworkComms.ConnectionAliveTestTimeoutMS" /></summary>
      <returns>True if the remote end responds within <see cref="P:NetworkCommsDotNet.NetworkComms.ConnectionAliveTestTimeoutMS" /> otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ConnectionAlive(System.Int32)">
      <summary>
            Uses the current connection and returns a bool dependant on the remote end responding to a SendReceiveObject call within the provided aliveRespondTimeoutMS
            </summary>
      <param name="aliveRespondTimeoutMS">The time to wait in milliseconds before returning false</param>
      <returns>True if the remote end responds within the provided aliveRespondTimeoutMS</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ConnectionAlive(System.Int32,System.Int64@)">
      <summary>
            Uses the current connection and returns a bool dependant on the remote end responding to a SendReceiveObject call within the provided aliveRespondTimeoutMS
            </summary>
      <param name="aliveRespondTimeoutMS">The time to wait in milliseconds before returning false</param>
      <param name="responseTimeMS">The number of milliseconds taken for a succesfull response to be received</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendPacket(NetworkCommsDotNet.Packet)">
      <summary>
            Send the provided packet to the remoteEndPoint. Waits for receive confirmation if required.
            </summary>
      <param name="packet">The packet to send</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendPacket(NetworkCommsDotNet.Packet,System.Int64@)">
      <summary>
            Send the provided packet to the remoteEndPoint. Waits for receive confirmation if required.
            </summary>
      <param name="packet">The packet to send</param>
      <param name="packetSequenceNumber">The sequence number of the packet sent</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendPacketSpecific(NetworkCommsDotNet.Packet)">
      <summary>
            Connection specific implementation for sending packets on this connection type. Will only be called from within a lock so method does not need to implement further thread safety.
            </summary>
      <param name="packet">The packet to send</param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.SendNullPacket">
      <summary>
            Connection specific implementation for sending a null packets on this connection type. Will only be called from within a lock so method does not need to implement further thread safety.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.Dispose">
      <summary>
            Dispose of the connection. Recommended usage is to call CloseConnection instead.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.TriggerConnectionKeepAliveThread">
      <summary>
            Starts the connectionKeepAliveWorker thread if it is not already started
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ConnectionKeepAliveWorker">
      <summary>
            A single static worker thread which keeps connections alive
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.AllConnectionsSendNullPacketKeepAlive(System.Boolean)">
      <summary>
            Polls all existing connections based on ConnectionKeepAlivePollIntervalSecs value. Serverside connections are polled slightly earlier than client side to help reduce potential congestion.
            </summary>
      <param name="returnImmediately">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.Connection.ShutdownBase(System.Int32)">
      <summary>
            Shutdown any static connection components
            </summary>
      <param name="threadShutdownTimeoutMS">
      </param>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.ConnectionInfo">
      <summary>
            Connection information related to this connection.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.ConnectionDefaultSendReceiveOptions">
      <summary>
            The default <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> used for this connection
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.ConnectionSpecificShutdownDelegate">
      <summary>
            A multicast function delegate for maintaining connection specific shutdown delegates
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.MinimumMSPerKBSendTimeout">
      <summary>
            The minimum number of milliseconds to allow per KB before a write timeout may occur. Default is 10.0.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.MaxNumSendTimes">
      <summary>
            The maximum number of writes intervals to maintain. Default is 100.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.MinNumSendsBeforeConnectionSpecificSendTimeout">
      <summary>
            The minimum number of writes before the connection specific write timeouts will be used. Default is 3.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.DefaultMSPerKBSendTimeout">
      <summary>
            The default milliseconds per KB write timeout before connection specific values become available. Default is 1000. See <see cref="P:NetworkCommsDotNet.Connection.MinNumSendsBeforeConnectionSpecificSendTimeout" />.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.MinSendTimeoutMS">
      <summary>
            The minimum timeout for any sized send in milliseconds. Prevents timeouts when sending less than 1KB. Default is 500.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.ConnectionKeepAlivePollIntervalSecs">
      <summary>
            The interval between keep alive polls of all connections. Set to int.MaxValue to disable keep alive poll
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Connection.NumberOfStDeviationsForWriteTimeout">
      <summary>
            The number of standard deviations from the mean to use for write timeouts. Default is 4.0.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.ConnectionType">
      <summary>
            The type of <see cref="T:NetworkCommsDotNet.Connection" />.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionType.Undefined">
      <summary>
            An undefined connection type. This is used as the default value.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionType.TCP">
      <summary>
            A TCP connection type. Used by <see cref="T:NetworkCommsDotNet.TCPConnection" />.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ConnectionType.UDP">
      <summary>
            A UDP connection type. Used by <see cref="T:NetworkCommsDotNet.UDPConnection" />.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.SentPacket">
      <summary>
            A wrapper object for keeping track of sent packets. These are used if a resend is requested due to a checksum validation failure.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.TCPConnection">
      <summary>
            A connection object which utilises <see href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</see> to communicate between peers.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.TCPConnection.tcpClient">
      <summary>
            The TcpClient corresponding to this connection.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.TCPConnection.tcpClientNetworkStream">
      <summary>
            The networkstream associated with the tcpClient.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,System.Boolean)">
      <summary>
            Create a <see cref="T:NetworkCommsDotNet.TCPConnection" /> with the provided connectionInfo. If there is an existing connection that will be returned instead. 
            If a new connection is created it will be registered with NetworkComms and can be retreived using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection" /> and overrides.
            </summary>
      <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
      <param name="establishIfRequired">If true will establish the TCP connection with the remote end point before returning</param>
      <returns>Returns a <see cref="T:NetworkCommsDotNet.TCPConnection" /></returns>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,System.Boolean)">
      <summary>
            Create a TCP connection with the provided connectionInfo and sets the connection default SendReceiveOptions. If there is an existing connection that is returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retreived using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection" /> and overrides.
            </summary>
      <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
      <param name="defaultSendReceiveOptions">The SendReceiveOptions which will be set as this connections defaults</param>
      <param name="establishIfRequired">If true will establish the TCP connection with the remote end point before returning</param>
      <returns>Returns a <see cref="T:NetworkCommsDotNet.TCPConnection" /></returns>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,System.Net.Sockets.TcpClient,System.Boolean)">
      <summary>
            Internal <see cref="T:NetworkCommsDotNet.TCPConnection" /> creation which hides the necessary internal calls
            </summary>
      <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
      <param name="defaultSendReceiveOptions">Connection default SendReceiveOptions</param>
      <param name="tcpClient">If this is an incoming connection we will already have access to the tcpClient, otherwise use null</param>
      <param name="establishIfRequired">Establish during create if true</param>
      <returns>An existing connection or a new one</returns>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,System.Net.Sockets.TcpClient)">
      <summary>
            TCP connection constructor
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.EstablishConnectionSpecific">
      <summary>
            Establish the connection
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.ConnectSocket">
      <summary>
            If we were not provided with a tcpClient on creation we need to create one
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.StartIncomingDataListen">
      <summary>
            Starts listening for incoming data on this TCP connection
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.IncomingTCPPacketHandler(System.IAsyncResult)">
      <summary>
            Asynchronous incoming connection data delegate
            </summary>
      <param name="ar">The call back state object</param>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.IncomingTCPDataSyncWorker">
      <summary>
            Synchronous incoming connection data worker
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.CloseConnectionSpecific(System.Boolean,System.Int32)">
      <summary>
            Closes the <see cref="T:NetworkCommsDotNet.TCPConnection" /></summary>
      <param name="closeDueToError">Closing a connection due an error possibly requires a few extra steps.</param>
      <param name="logLocation">Optional debug parameter.</param>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.SendPacketSpecific(NetworkCommsDotNet.Packet)">
      <summary>
            Sends the provided packet to the remote end point
            </summary>
      <param name="packet">Packet to send</param>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.SendNullPacket">
      <summary>
            Send a null packet (1 byte) to the remotEndPoint. Helps keep the TCP connection alive while ensuring the bandwidth usage is an absolute minimum. If an exception is thrown the connection will be closed.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.StartListening(System.Boolean)">
      <summary>
            Accept new incoming TCP connections on all allowed IP's and Port's
            </summary>
      <param name="useRandomPortFailOver">If true and the default local port is not available will select one at random. If false and a port is unavailable listening will not be enabled on that adaptor</param>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.StartListening(System.Net.IPEndPoint,System.Boolean)">
      <summary>
            Accept new incoming TCP connections on specified <see cref="T:System.Net.IPEndPoint" /></summary>
      <param name="newLocalEndPoint">The localEndPoint to listen for connections on.</param>
      <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random. If false and a port is unavailable will throw <see cref="T:DPSBase.CommsSetupShutdownException" /></param>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.StartListening(System.Collections.Generic.List{System.Net.IPEndPoint},System.Boolean)">
      <summary>
            Accept new TCP connections on specified list of <see cref="T:System.Net.IPEndPoint" /></summary>
      <param name="localEndPoints">The localEndPoints to listen for connections on</param>
      <param name="useRandomPortFailOver">If true and the requested local port is not available on a given IPEndPoint will select one at random. If false and a port is unavailable will throw <see cref="T:DPSBase.CommsSetupShutdownException" /></param>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.ExistingLocalListenEndPoints">
      <summary>
            Returns a list of <see cref="T:System.Net.IPEndPoint" /> corresponding to all current TCP local listeners
            </summary>
      <returns>List of <see cref="T:System.Net.IPEndPoint" /> corresponding to all current TCP local listeners</returns>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.ExistingLocalListenEndPoints(System.Net.IPAddress)">
      <summary>
            Returns a list of <see cref="T:System.Net.IPEndPoint" /> corresponding to a possible local listeners on the provided <see cref="T:System.Net.IPAddress" />. If not listening on provided <see cref="T:System.Net.IPAddress" /> returns empty list.
            </summary>
      <param name="ipAddress">The <see cref="T:System.Net.IPAddress" /> to match to a possible local listener</param>
      <returns>If listener exists returns <see cref="T:System.Net.IPAddress" /> otherwise null</returns>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.Listening">
      <summary>
            Returns true if listening for new TCP connections.
            </summary>
      <returns>True if listening for new TCP connections.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.TriggerIncomingConnectionWorkerThread">
      <summary>
            Start the IncomingConnectionWorker if required
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.IncomingConnectionWorker">
      <summary>
            Picks up any new incoming connections
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.Shutdown(System.Int32)">
      <summary>
            Shutdown everything TCP related
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.TCPConnection.CloseAndRemoveAllLocalConnectionListeners">
      <summary>
            Close down all local TCP listeners
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.TCPConnection.EnableNagleAlgorithmForNewConnections">
      <summary>
            By default usage of <see href="http://en.wikipedia.org/wiki/Nagle's_algorithm">Nagle's algorithm</see> during TCP exchanges is disabled for performance reasons. If you wish it to be used for newly established connections set this property to true.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.UdpClientThreadSafe">
      <summary>
            Threadsafe wrapper around a udpClient object as it may be used by multiple UDP connections at any one time.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.UdpClientThreadSafe.SIO_UDP_CONNRESET">
      <summary>
            IOControl value used to ignore ICMP destination unreachable packets which result in the socket closing
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.UDPConnection">
      <summary>
            A connection object which utilises <see href="http://en.wikipedia.org/wiki/User_Datagram_Protocol">UDP</see> to communicate between peers.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.UDPConnection.maximumSingleDatagramSizeBytes">
      <summary>
            The maximum datagram size limit for udp
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.UDPConnection.isIsolatedUDPConnection">
      <summary>
            An isolated udp connection will only accept incoming packets coming from a specific RemoteEndPoint.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.UDPConnection.udpConnectionListeners">
      <summary>
            The local udp connection listeners
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.UDPConnection.udpRogueSender">
      <summary>
            The rogue udp connection is used for sending ONLY if no available locally bound client is available
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.#ctor(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.UDPOptions,System.Boolean,NetworkCommsDotNet.UDPConnection)">
      <summary>
            Internal constructor for UDP connections
            </summary>
      <param name="connectionInfo">
      </param>
      <param name="defaultSendReceiveOptions">
      </param>
      <param name="level">
      </param>
      <param name="listenForIncomingPackets">
      </param>
      <param name="existingConnection">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.EstablishConnectionSpecific">
      <summary>
            Establish this UDP connection. This will become more relevant as additional udp levels are supported.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.CloseConnectionSpecific(System.Boolean,System.Int32)">
      <summary>
            Executes UDP specific shutdown tasks
            </summary>
      <param name="closeDueToError">True if closing connection due to error</param>
      <param name="logLocation">An optional debug parameter.</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.SendPacketSpecific(NetworkCommsDotNet.Packet)">
      <summary>
            Send a packet to the RemoteEndPoint specified in the ConnectionInfo
            </summary>
      <param name="packet">Packet to send</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.SendPacketSpecific(NetworkCommsDotNet.Packet,System.Net.IPEndPoint)">
      <summary>
            Send a packet to the specified ipEndPoint. This feature is unique to UDP because of its connectionless structure.
            </summary>
      <param name="packet">Packet to send</param>
      <param name="ipEndPoint">The target ipEndPoint</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.SendNullPacket">
      <summary>
            Sends a null packet using UDP
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.StartIncomingDataListen">
      <summary>
            Start listening for incoming udp data
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.IncomingUDPPacketHandler(System.IAsyncResult)">
      <summary>
            Incoming data listen async method
            </summary>
      <param name="ar">Call back state data</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.IncomingUDPPacketWorker">
      <summary>
            Incoming data listen sync method
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.UDPOptions,System.Boolean)">
      <summary>
            Create a UDP connection with the provided connectionInfo. If there is an existing connection that is returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retreived using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection" /> and overrides.
            </summary>
      <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
      <param name="level">The UDP level to use for this connection</param>
      <param name="listenForReturnPackets">If set to true will ensure that reply packets are handled</param>
      <returns>Returns a <see cref="T:NetworkCommsDotNet.UDPConnection" /></returns>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.UDPOptions,System.Boolean)">
      <summary>
            Create a UDP connection with the provided connectionInfo and and sets the connection default SendReceiveOptions. If there is an existing connection that is returned instead.
            If a new connection is created it will be registered with NetworkComms and can be retreived using <see cref="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection" />.
            </summary>
      <param name="connectionInfo">ConnectionInfo to be used to create connection</param>
      <param name="defaultSendReceiveOptions">The SendReceiveOptions to use as defaults for this connection</param>
      <param name="level">The UDP options to use for this connection</param>
      <param name="listenForReturnPackets">If set to true will ensure that reply packets can be received</param>
      <returns>Returns a <see cref="T:NetworkCommsDotNet.UDPConnection" /></returns>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.GetConnection(NetworkCommsDotNet.ConnectionInfo,NetworkCommsDotNet.SendReceiveOptions,NetworkCommsDotNet.UDPOptions,System.Boolean,NetworkCommsDotNet.UDPConnection)">
      <summary>
            Internal UDP creation method that performs the necessary tasks
            </summary>
      <param name="connectionInfo">
      </param>
      <param name="defaultSendReceiveOptions">
      </param>
      <param name="level">
      </param>
      <param name="listenForReturnPackets">
      </param>
      <param name="existingConnection">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.StartListening(System.Boolean)">
      <summary>
            Listen for incoming UDP packets on all allowed local IP's on default port.
            </summary>
      <param name="useRandomPortFailOver">If true and the default local port is not available will select one at random. If false and a port is unavailable listening will not be enabled on that adaptor unless NetworkComms.ListenOnAllAllowedInterfaces is false in which case a <see cref="T:DPSBase.CommsSetupShutdownException" /> will be thrown instead.</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.StartListening(System.Net.IPEndPoint,System.Boolean)">
      <summary>
            Listen for incoming UDP packets on specified <see cref="T:System.Net.IPEndPoint" />. 
            </summary>
      <param name="newLocalEndPoint">The localEndPoint to listen for packets on</param>
      <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random. If false and a port is unavailable will throw <see cref="T:DPSBase.CommsSetupShutdownException" /></param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.StartListening(System.Collections.Generic.List{System.Net.IPEndPoint},System.Boolean)">
      <summary>
            Listen for incoming UDP packets on provided list of <see cref="T:System.Net.IPEndPoint" />. 
            </summary>
      <param name="localEndPoints">The localEndPoints to listen for packets on.</param>
      <param name="useRandomPortFailOver">If true and the requested local port is not available will select one at random. If false and a port is unavailable will throw <see cref="T:DPSBase.CommsSetupShutdownException" /></param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.ExistingLocalListenEndPoints">
      <summary>
            Returns a list of <see cref="T:System.Net.IPEndPoint" /> corresponding with all UDP local listeners
            </summary>
      <returns>List of <see cref="T:System.Net.IPEndPoint" /> corresponding with all UDP local listeners</returns>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.ExistingLocalListenEndPoints(System.Net.IPAddress)">
      <summary>
            Returns an <see cref="T:System.Net.IPEndPoint" /> corresponding to a possible local listener on the provided <see cref="T:System.Net.IPAddress" />. If not listening on provided <see cref="T:System.Net.IPAddress" /> returns null.
            </summary>
      <param name="ipAddress">The <see cref="T:System.Net.IPAddress" /> to match to a possible local listener</param>
      <returns>If listener exists returns <see cref="T:System.Net.IPAddress" /> otherwise null</returns>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.Listening">
      <summary>
            Returns true if listening for new UDP connections.
            </summary>
      <returns>True if listening for new UDP connections.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.Shutdown">
      <summary>
            Shutdown everything UDP related
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.CloseAndRemoveAllLocalConnectionListeners">
      <summary>
            Close down all local UDP listeners
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.SendObject(System.String,System.Object,System.String,System.Int32)">
      <summary>
            Sends a single object to the provided IPAddress and Port. NOTE: Any possible reply will be ignored unless listening for incoming udp packets. 
            </summary>
      <param name="sendingPacketType">The sending packet type</param>
      <param name="objectToSend">The object to send.</param>
      <param name="ipAddress">The destination IP address. Supports multicast addresses such as 192.168.0.255 etc</param>
      <param name="port">The destination port.</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.SendObject(System.String,System.Object,System.Net.IPEndPoint)">
      <summary>
            Sends a single object to the provided endPoint. NOTE: Any possible reply will be ignored unless listening for incoming udp packets. 
            </summary>
      <param name="sendingPacketType">The sending packet type</param>
      <param name="objectToSend">The object to send</param>
      <param name="ipEndPoint">The destination IPEndPoint. Supports multicast endpoints.</param>
    </member>
    <member name="M:NetworkCommsDotNet.UDPConnection.SendObject(System.String,System.Object,System.Net.IPEndPoint,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Sends a single object to the provided endPoint. NOTE: Any possible reply will be ignored unless listening for incoming udp packets. 
            </summary>
      <param name="sendingPacketType">The sending packet type</param>
      <param name="objectToSend">The object to send</param>
      <param name="ipEndPoint">The destination IPEndPoint. Supports multicast endpoints.</param>
      <param name="sendReceiveOptions">The sendReceiveOptions to use for this send</param>
    </member>
    <member name="P:NetworkCommsDotNet.UDPConnection.UDPOptions">
      <summary>
            Options associated with this UDPConnection
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.UDPConnection.IgnoreICMPDestinationUnreachable">
      <summary>
            By default a UDP datagram sent to an unreachable destination will result in an ICMP Destination Unreachable packet. This can result in a SocketException on the local end.
            To avoid this behaviour these ICMP packets are ignored by default, i.e. this value is set to true. Setting this value to false could cause new UDP connections to close, possibly unexpectedly.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.UDPOptions">
      <summary>
            A <see cref="T:NetworkCommsDotNet.UDPConnection" /> could support different combinations of features. i.e. From the most basic (None) which sends conectionless UDP packets
            upto an emulated TCP. Future versions of NetworkCommsDotNet will support an ever increasing number of UDP features.
            This flag enum is used to specifiy which of the available features should be used.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.UDPOptions.None">
      <summary>
            The most basic UDP option. All UDP packets are sent connectionless with no error handling, sequencing or duplication prevention.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.NetworkComms">
      <summary>
            Top level interface for NetworkCommsDotNet library. Anything which is not connection specific generally happens within the NetworkComms class. e.g. Keeping track of all connections, global defaults and settings, serialisers and data processors etc.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.NetworkComms.IPComparer">
      <summary>
            Custom comparer for IP addresses. Used by <see cref="M:NetworkCommsDotNet.NetworkComms.AllAllowedIPs" /></summary>
    </member>
    <member name="T:NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate`1">
      <summary>
            Delegate for handling incoming packets. See AppendGlobalIncomingPacketHandler members.
            </summary>
      <typeparam name="T">The type of object which is expected for this handler</typeparam>
      <param name="packetHeader">The <see cref="T:NetworkCommsDotNet.PacketHeader" /> of the incoming packet</param>
      <param name="connection">The connection with which this packet was received</param>
      <param name="incomingObject">The incoming object of specified type T</param>
    </member>
    <member name="T:NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate">
      <summary>
            Delegate which is executed when a connection is established or shutdown. See <see cref="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionEstablishHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate,System.Boolean)" /> and <see cref="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionCloseHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)" />.
            </summary>
      <param name="connection">The connection which has been established or shutdown.</param>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.randomGen">
      <summary>
            An internal random object
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.commsShutdown">
      <summary>
            A single boolean used to control a NetworkCommsDotNet shutdown
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.totalPacketSendCount">
      <summary>
            A running total of the number of packets sent on all connections. Used to initialise packet sequence counters to ensure duplicates can not occur.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalDictAndDelegateLocker">
      <summary>
            Locker for connection dictionaries
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.allConnectionsById">
      <summary>
            Primary connection dictionary stored by network indentifier
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.allConnectionsByEndPoint">
      <summary>
            Secondary connection dictionary stored by ip end point. Allows for quick cross referencing.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.oldNetworkIdentifierToConnectionInfo">
      <summary>
            Old connection cache so that requests for connectionInfo can be returned even after a connection has been closed.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.timeCriticalThreadPriority">
      <summary>
            In times of high CPU usage we need to ensure that certain time critical functions, like connection handshaking do not timeout.
            This sets the thread priority for those processes.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.reservedPacketTypeNames">
      <summary>
            An internal reference copy of all reservedPacketTypeNames.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalIncomingPacketHandlers">
      <summary>
            Dictionary of all custom packetHandlers. Key is packetType.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalIncomingPacketUnwrappers">
      <summary>
            Dictionary of any non default custom packet unwrappers. Key is packetType.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionShutdownDelegates">
      <summary>
            Multicast delegate pointer for connection shutdowns.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionShutdownDelegateCount">
      <summary>
            Delegate counter for debugging.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionEstablishDelegatesAsync">
      <summary>
            Multicast delegate pointer for connection establishments, run asynchronously.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionEstablishDelegatesSync">
      <summary>
            Multicast delegate pointer for connection establishments, run synchronously.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.globalConnectionEstablishDelegateCount">
      <summary>
            Delegate counter for debugging.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.NetworkComms.errorLocker">
      <summary>
            Locker for LogError() which ensures thread safe saves.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AllAllowedIPs">
      <summary>
            Returns all allowed local IP addresses. 
            If <see cref="P:NetworkCommsDotNet.NetworkComms.AllowedAdaptorNames" /> has been set only returns IP addresses corresponding with specified adaptors.
            If <see cref="P:NetworkCommsDotNet.NetworkComms.AllowedIPPrefixes" /> has been set only returns matching addresses ordered in descending preference. i.e. Most preffered at [0].
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.IsAddressInSubnet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
      <summary>
            Returns true if the provided address exists within the provided subnet.
            </summary>
      <param name="address">The address to check, i.e. 192.168.0.10</param>
      <param name="subnet">The subnet, i.e. 192.168.0.0</param>
      <param name="mask">The subnet mask, i.e. 255.255.255.0</param>
      <returns>True if address is in the provided subnet</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AverageNetworkLoadIncoming(System.Byte)">
      <summary>
            Returns the averaged value of CurrentNetworkLoadIncoming, as a value between 0 and 1, for a time window of upto 254 seconds. Triggers load analysis upon first call.
            </summary>
      <param name="secondsToAverage">Number of seconds over which historial data should be used to arrive at an average</param>
      <returns>Average network load as a double between 0 and 1</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AverageNetworkLoadOutgoing(System.Byte)">
      <summary>
            Returns the averaged value of CurrentNetworkLoadIncoming, as a value between 0 and 1, for a time window of upto 254 seconds. Triggers load analysis upon first call.
            </summary>
      <param name="secondsToAverage">Number of seconds over which historial data should be used to arrive at an average</param>
      <returns>Average network load as a double between 0 and 1</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.BestLocalEndPoint(System.Net.IPEndPoint)">
      <summary>
            Determines the most appropriate local end point to contact the provided remote end point. 
            Testing shows this method takes on average 1.6ms to return.
            </summary>
      <param name="remoteIPEndPoint">The remote end point</param>
      <returns>The selected local end point</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.NetworkLoadWorker">
      <summary>
            Takes a network load snapshot (CurrentNetworkLoad) every NetworkLoadUpdateWindowMS
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.CompleteIncomingItemTask(System.Object)">
      <summary>
            Once we have received all incoming data we handle it further. This is performed at the global level to help support different priorities.
            </summary>
      <param name="itemAsObj">Possible PriorityQueueItem. If null is provided an item will be removed from the global item queue</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0})">
      <summary>
            Add an incoming packet handler using default SendReceiveOptions. Multiple handlers for the same packet type will be executed in the order they are added.
            </summary>
      <typeparam name="T">The type of incoming object</typeparam>
      <param name="packetTypeStr">The packet type for which this handler will be executed</param>
      <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalIncomingPacketHandler``1(System.String,NetworkCommsDotNet.NetworkComms.PacketHandlerCallBackDelegate{``0},NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Add an incoming packet handler using the provided SendReceiveOptions. Multiple handlers for the same packet type will be executed in the order they are added.
            </summary>
      <typeparam name="T">The type of incoming object</typeparam>
      <param name="packetTypeStr">The packet type for which this handler will be executed</param>
      <param name="packetHandlerDelgatePointer">The delegate to be executed when a packet of packetTypeStr is received</param>
      <param name="sendReceiveOptions">The SendReceiveOptions to be used for the provided packet type</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingPacketHandler(System.String,System.Delegate)">
      <summary>
            Removes the provided delegate for the specified packet type. If the provided delegate does not exist for this packet type just returns.
            </summary>
      <param name="packetTypeStr">The packet type for which the delegate will be removed</param>
      <param name="packetHandlerDelgatePointer">The delegate to be removed</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingPacketHandler(System.String)">
      <summary>
            Removes all delegates for the provided packet type.
            </summary>
      <param name="packetTypeStr">Packet type for which all delegates should be removed</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalIncomingPacketHandler">
      <summary>
            Removes all delegates for all packet types
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.TriggerGlobalPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connection,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Trigger incoming packet delegates for the provided parameters.
            </summary>
      <param name="packetHeader">The packet header</param>
      <param name="connection">The incoming connection</param>
      <param name="incomingDataStream">The bytes corresponding to the incoming object</param>
      <param name="options">The SendReceiveOptions to be used to convert incomingObjectBytes back to the desired object</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.TriggerGlobalPacketHandlers(NetworkCommsDotNet.PacketHeader,NetworkCommsDotNet.Connection,System.IO.MemoryStream,NetworkCommsDotNet.SendReceiveOptions,System.Boolean)">
      <summary>
            Trigger incoming packet delegates for the provided parameters.
            </summary>
      <param name="packetHeader">The packet header</param>
      <param name="connection">The incoming connection</param>
      <param name="incomingDataStream">The bytes corresponding to the incoming object</param>
      <param name="options">The SendReceiveOptions to be used to convert incomingObjectBytes back to the desired object</param>
      <param name="ignoreUnknownPacketTypeOverride">Used to potentially override NetworkComms.IgnoreUnknownPacketTypes property</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GlobalPacketTypeUnwrapperOptions(System.String)">
      <summary>
            Returns the unwrapper <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> for the provided packet type. If no specific options are registered returns null.
            </summary>
      <param name="packetTypeStr">The packet type for which the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> are required</param>
      <returns>The requested <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> otherwise null</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GlobalIncomingPacketHandlerExists(System.String)">
      <summary>
            Returns true if a global packet handler exists for the provided packet type.
            </summary>
      <param name="packetTypeStr">The packet type for which to check incoming packet handlers</param>
      <returns>True if a global packet handler exists</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GlobalIncomingPacketHandlerExists(System.String,System.Delegate)">
      <summary>
            Returns true if the provided global packet handler has been added for the provided packet type.
            </summary>
      <param name="packetTypeStr">The packet type within which to check packet handlers</param>
      <param name="packetHandlerDelgatePointer">The packet handler to look for</param>
      <returns>True if a global packet handler exists for the provided packetType</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionCloseHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
      <summary>
            Add a new connection shutdown delegate which will be called for every connection as it is closes.
            </summary>
      <param name="connectionShutdownDelegate">The delegate to call on all connection shutdowns</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalConnectionCloseHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
      <summary>
            Remove a connection shutdown delegate.
            </summary>
      <param name="connectionShutdownDelegate">The delegate to remove from connection shutdown events</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AppendGlobalConnectionEstablishHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate,System.Boolean)">
      <summary>
            Add a new connection establish delegate which will be called for every connection once it has been succesfully established.
            </summary>
      <param name="connectionEstablishDelegate">The delegate to call after all connection establishments.</param>
      <param name="runSynchronously">If true this ConnectionEstablishShutdownDelegate will be called synchronously during the connection establish. The connection will not be considered established until the ConnectionEstablishShutdownDelegate has completed.</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.RemoveGlobalConnectionEstablishHandler(NetworkCommsDotNet.NetworkComms.ConnectionEstablishShutdownDelegate)">
      <summary>
            Remove a connection establish delegate.
            </summary>
      <param name="connectionEstablishDelegate">The delegate to remove from connection establish events</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.Shutdown(System.Int32)">
      <summary>
            Shutdown all connections, comms threads and execute OnCommsShutdown event. Any packet handlers are left unchanged. If any comms activity has taken place this should be called on application close.
            </summary>
      <param name="threadShutdownTimeoutMS">The time to wait for worker threads to close before attempting a thread abort.</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.EnableLogging">
      <summary>
            Enable logging using a default config. All log output is written directly to the local console.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.EnableLogging(NLog.Config.LoggingConfiguration)">
      <summary>
            Enable logging using the provided config. See examples for usage.
            </summary>
      <param name="loggingConfiguration">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.DisableLogging">
      <summary>
            Disable all logging in NetworkCommsDotNet
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AppendStringToLogFile(System.String,System.String)">
      <summary>
            Appends the provided logString to end of fileName.txt. If the file does not exist it will be created.
            </summary>
      <param name="fileName">The filename to use. The extension .txt will be appended automatically</param>
      <param name="logString">The string to append.</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.LogError(System.Exception,System.String,System.String)">
      <summary>
            Logs the provided exception to a file to assist troubleshooting.
            </summary>
      <param name="ex">The exception to be logged</param>
      <param name="fileName">The filename to use. A timestamp and extension .txt will be appended automatically</param>
      <param name="optionalCommentStr">An optional string which will appear at the top of the error file</param>
      <returns>The entire fileName used.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.SendObject(System.String,System.String,System.Int32,System.Object)">
      <summary>
            Send the provided object to the specified destination using TCP. Uses default sendReceiveOptions. For more control over options see connection specific methods.
            </summary>
      <param name="packetTypeStr">Packet type to use for send</param>
      <param name="destinationIPAddress">The destination ip address</param>
      <param name="destinationPort">The destination listen port</param>
      <param name="sendObject">The obect to send</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.SendReceiveObject``1(System.String,System.String,System.Int32,System.String,System.Int32,System.Object)">
      <summary>
            Send the provided object to the specified destination and wait for a return object using TCP. Uses default sendReceiveOptions. For more control over options see connection specific methods.
            </summary>
      <typeparam name="returnObjectType">The expected return object type, i.e. string, int[], etc</typeparam>
      <param name="sendingPacketTypeStr">Packet type to use during send</param>
      <param name="destinationIPAddress">The destination ip address</param>
      <param name="destinationPort">The destination listen port</param>
      <param name="expectedReturnPacketTypeStr">Expected packet type used for return object</param>
      <param name="returnPacketTimeOutMilliSeconds">Time to wait in milliseconds for return object</param>
      <param name="sendObject">Object to send</param>
      <returns>The expected return object</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.MD5Bytes(System.IO.Stream)">
      <summary>
            Return the MD5 hash of the provided memory stream as a string. Stream position will be equal to the length of stream on return, this ensures the MD5 is consistent.
            </summary>
      <param name="streamToMD5">The bytes which will be checksummed</param>
      <returns>The MD5 checksum as a string</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.MD5Bytes(System.IO.Stream,System.Int64,System.Int32)">
      <summary>
            Return the MD5 hash of the provided memory stream as a string. Stream position will be equal to the length of stream on return, this ensures the MD5 is consistent.
            </summary>
      <param name="streamToMD5">The bytes which will be checksummed</param>
      <param name="start">The start position in the stream</param>
      <param name="length">The length in the stream to MD5</param>
      <returns>The MD5 checksum as a string</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.MD5Bytes(System.Byte[])">
      <summary>
            Return the MD5 hash of the provided byte array as a string
            </summary>
      <param name="bytesToMd5">The bytes which will be checksummed</param>
      <returns>The MD5 checksum as a string</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AllConnectionInfo(System.Boolean)">
      <summary>
            Returns a ConnectionInfo array containing information for all connections
            </summary>
      <param name="includeClosedConnections">If true information for closed connections will also be included</param>
      <returns>List of ConnectionInfo containing information for all requested connections</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AllConnectionInfo(NetworkCommsDotNet.ShortGuid,System.Boolean)">
      <summary>
            Returns a ConnectionInfo array containing information for all connections which have the provided networkIdentifier. It is also possible to include information for closed connections.
            </summary>
      <param name="networkIdentifier">The networkIdentifier corresponding to the desired connectionInfo information</param>
      <param name="includeClosedConnections">If true will include information for connections which are closed. Otherwise only active connections will be included.</param>
      <returns>List of ConnectionInfo containing information for matching connections</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.TotalNumConnections">
      <summary>
            Returns the total number of connections
            </summary>
      <returns>Total number of connections</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.TotalNumConnections(System.Net.IPAddress)">
      <summary>
            Returns the total number of connections where the <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> matches the provided <see cref="T:System.Net.IPAddress" /></summary>
      <param name="matchIP">The <see cref="T:System.Net.IPAddress" /> to match</param>
      <returns>Total number of connections where the <see cref="P:NetworkCommsDotNet.ConnectionInfo.RemoteEndPoint" /> matches the provided <see cref="T:System.Net.IPAddress" /></returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.CloseAllConnections">
      <summary>
            Close all connections
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.CloseAllConnections(NetworkCommsDotNet.ConnectionType)">
      <summary>
            Close all connections of the provided <see cref="T:NetworkCommsDotNet.ConnectionType" /></summary>
      <param name="connectionType">The type of connections to be closed</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.CloseAllConnections(NetworkCommsDotNet.ConnectionType,System.Net.IPEndPoint[])">
      <summary>
            Close all connections of the provided <see cref="T:NetworkCommsDotNet.ConnectionType" /> except to provided <see cref="T:System.Net.IPEndPoint" /> array.
            </summary>
      <param name="connectionTypeToClose">The type of connections to be closed. ConnectionType.<see cref="F:NetworkCommsDotNet.ConnectionType.Undefined" /> matches all types.</param>
      <param name="closeAllExceptTheseEndPoints">Close all except those with provided <see cref="T:System.Net.IPEndPoint" /> array</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection">
      <summary>
            Returns a list of all connections
            </summary>
      <returns>A list of requested connections. If no matching connections exist returns empty list.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionType)">
      <summary>
            Returns a list of all connections matching the provided <see cref="T:NetworkCommsDotNet.ConnectionType" /></summary>
      <param name="connectionType">The type of connections to return. ConnectionType.<see cref="F:NetworkCommsDotNet.ConnectionType.Undefined" /> matches all types.</param>
      <returns>A list of requested connections. If no matching connections exist returns empty list.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ShortGuid,NetworkCommsDotNet.ConnectionType)">
      <summary>
            Retrieve a list of connections with the provided <see cref="T:NetworkCommsDotNet.ShortGuid" /> networkIdentifier of the provided <see cref="T:NetworkCommsDotNet.ConnectionType" />.
            </summary>
      <param name="networkIdentifier">The <see cref="T:NetworkCommsDotNet.ShortGuid" /> corresponding with the desired peer networkIdentifier</param>
      <param name="connectionType">The <see cref="T:NetworkCommsDotNet.ConnectionType" /> desired</param>
      <returns>A list of connections to the desired peer. If no matching connections exist returns empty list.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(NetworkCommsDotNet.ConnectionInfo)">
      <summary>
            Retrieve an existing connection with the provided ConnectionInfo.
            </summary>
      <param name="connectionInfo">ConnectionInfo corresponding with the desired connection</param>
      <returns>The desired connection. If no matching connection exists returns null.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.GetExistingConnection(System.Net.IPEndPoint,NetworkCommsDotNet.ConnectionType)">
      <summary>
            Retrieve an existing connection with the provided <see cref="T:System.Net.IPEndPoint" /> of the provided <see cref="T:NetworkCommsDotNet.ConnectionType" />.
            </summary>
      <param name="remoteEndPoint">IPEndPoint corresponding with the desired connection</param>
      <param name="connectionType">The <see cref="T:NetworkCommsDotNet.ConnectionType" /> desired</param>
      <returns>The desired connection. If no matching connection exists returns null.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.ConnectionExists(NetworkCommsDotNet.ConnectionInfo)">
      <summary>
            Check if a connection exists with the provided IPEndPoint and ConnectionType
            </summary>
      <param name="connectionInfo">ConnectionInfo corresponding with the desired connection</param>
      <returns>True if a matching connection exists, otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.ConnectionExists(NetworkCommsDotNet.ShortGuid,NetworkCommsDotNet.ConnectionType)">
      <summary>
            Check if a connection exists with the provided networkIdentifier and ConnectionType
            </summary>
      <param name="networkIdentifier">The <see cref="T:NetworkCommsDotNet.ShortGuid" /> corresponding with the desired peer networkIdentifier</param>
      <param name="connectionType">The <see cref="T:NetworkCommsDotNet.ConnectionType" /> desired</param>
      <returns>True if a matching connection exists, otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.ConnectionExists(System.Net.IPEndPoint,NetworkCommsDotNet.ConnectionType)">
      <summary>
            Check if a connection exists with the provided IPEndPoint and ConnectionType
            </summary>
      <param name="remoteEndPoint">IPEndPoint corresponding with the desired connection</param>
      <param name="connectionType">The <see cref="T:NetworkCommsDotNet.ConnectionType" /> desired</param>
      <returns>True if a matching connection exists, otherwise false</returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.RemoveConnectionReference(NetworkCommsDotNet.Connection,System.Boolean)">
      <summary>
            Removes the reference to the provided connection from within networkComms. DOES NOT CLOSE THE CONNECTION. Returns true if the provided connection reference existed and was removed, false otherwise.
            </summary>
      <param name="connection">
      </param>
      <param name="maintainConnectionInfoHistory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AddConnectionByReferenceEndPoint(NetworkCommsDotNet.Connection,System.Net.IPEndPoint)">
      <summary>
            Adds a reference by IPEndPoint to the provided connection within networkComms.
            </summary>
      <param name="connection">
      </param>
      <param name="endPointToUse">An optional override which forces a specific IPEndPoint</param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.UpdateConnectionReferenceByEndPoint(NetworkCommsDotNet.Connection,System.Net.IPEndPoint)">
      <summary>
            Update the endPoint reference for the provided connection with the newEndPoint. If there is no change just returns
            </summary>
      <param name="connection">
      </param>
      <param name="newRemoteEndPoint">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.NetworkComms.AddConnectionReferenceByIdentifier(NetworkCommsDotNet.Connection)">
      <summary>
            Add a reference by networkIdentifier to the provided connection within NetworkComms. Requires a reference by IPEndPoint to already exist.
            </summary>
      <param name="connection">
      </param>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.HostName">
      <summary>
            Returns the current machine hostname
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.AllowedIPPrefixes">
      <summary>
            If set NetworkCommsDotNet will only operate on matching IP Addresses. Also see <see cref="P:NetworkCommsDotNet.NetworkComms.AllowedAdaptorNames" />.
            Correct format is string[] { "192.168", "213.111.10" }. If multiple prefixes are provided the earlier prefix, if found, takes priority.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.AllowedAdaptorNames">
      <summary>
             If set NetworkCommsDotNet will only operate on specified adaptors. Correct format is string[] { "eth0", "en0", "wlan0" }.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.DefaultListenPort">
      <summary>
            The default port NetworkCommsDotNet will operate on
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.NetworkIdentifier">
      <summary>
            The local identifier for this instance of NetworkCommsDotNet. This is an application unique identifier.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.CurrentRuntimeEnvironment">
      <summary>
            The current runtime environment. Detected automatically on startup. Performance may be adversly affected if this is changed.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.NetworkLoadUpdateWindowMS">
      <summary>
            The number of millisconds over which to take an instance load (CurrentNetworkLoad) to be used in averaged values (AverageNetworkLoad). 
            Default is 2000ms. Shorter values can be used but less than 200ms may cause significant errors in the value of returned value, especially in mono environments.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.InterfaceLinkSpeed">
      <summary>
            The interface link speed in bits/sec used for network load calculations. Default is 100Mb/sec
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.CurrentNetworkLoadIncoming">
      <summary>
            Returns the current instance network usage, as a value between 0 and 1. Returns the largest value for any available network adaptor. Triggers load analysis upon first call.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.CurrentNetworkLoadOutgoing">
      <summary>
            Returns the current instance network usage, as a value between 0 and 1. Returns the largest value for any available network adaptor. Triggers load analysis upon first call.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.ConnectionListenModeUseSync">
      <summary>
            Used for switching between async and sync connectionListen modes. Default is false. No noticable performance difference between the two modes.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.ListenOnAllAllowedInterfaces">
      <summary>
            Used for switching between listening on a single interface or multiple interfaces. Default is true. See <see cref="P:NetworkCommsDotNet.NetworkComms.AllowedIPPrefixes" /> and <see cref="P:NetworkCommsDotNet.NetworkComms.AllowedAdaptorNames" /></summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.ReceiveBufferSizeBytes">
      <summary>
            Receive data buffer size. Default is 80KB. CAUTION: Changing the default value can lead to performance degredation.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.SendBufferSizeBytes">
      <summary>
            Send data buffer size. Default is 80KB. CAUTION: Changing the default value can lead to performance degredation.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.CommsThreadPool">
      <summary>
            The threadpool used by networkComms.Net to execute incoming packet handlers.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.EnablePacketCheckSumValidation">
      <summary>
            When enabled uses an MD5 checksum to validate all received packets. Default is false, relying on any possible connection checksum alone. 
            Also when enabled any packets sent less than CheckSumMismatchSentPacketCacheMaxByteLimit will be cached for a duration to ensure successful delivery.
            Default false.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.CheckSumMismatchSentPacketCacheMaxByteLimit">
      <summary>
            When checksum validation is enabled sets the limit below which sent packets are cached to ensure successful delivery. Default 75KB.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.MinimumSentPacketCacheTimeMinutes">
      <summary>
            When a sent packet has been cached for a possible resend this is the minimum length of time it will be retained. Default is 1.0 minutes.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.LastSentPacketCacheCleanup">
      <summary>
            Records the last sent packet cache cleanup time. Prevents the sent packet cache from being checked too frequently.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.IgnoreUnknownPacketTypes">
      <summary>
            If true any unknown incoming packet types are ignored. Default is false and will result in an error file being created if an unknown packet type is received.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.ConnectionEstablishTimeoutMS">
      <summary>
            Time to wait in milliseconds before throwing an exception when waiting for a connection to be established. Default is 30000.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.PacketConfirmationTimeoutMS">
      <summary>
            Time to wait in milliseconds before throwing an exception when waiting for confirmation of packet receipt. Default is 5000.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.ConnectionAliveTestTimeoutMS">
      <summary>
            Time to wait in milliseconds before assuming a remote connection is dead when doing a connection test. Default is 1000.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.DisableConnectionSendTimeouts">
      <summary>
            By deefault NetworkComms.Net closes connections for which sends take a long time. The timeout is calculated based on previous connection send performances. Set this to true to disable this feature.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.LoggingEnabled">
      <summary>
            Returns true if comms logging has been enabled.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.Logger">
      <summary>
            Access the NetworkCommsDotNet logger externally.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.InternalFixedSendReceiveOptions">
      <summary>
            The following are used for internal comms objects, packet headers, connection establishment etc. 
            We generally seem to increase the size of our data if compressing small objects (~50 bytes)
            Given the typical header size is 40 bytes we might as well not compress these objects.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.NetworkComms.DefaultSendReceiveOptions">
      <summary>
            Default options for sending and receiving in the absence of specific values
            </summary>
    </member>
    <member name="E:NetworkCommsDotNet.NetworkComms.OnCommsShutdown">
      <summary>
            Comms shutdown event. This will be triggered when calling NetworkComms.Shutdown
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.Packet">
      <summary>
            Wrapper for <see cref="P:NetworkCommsDotNet.Packet.PacketHeader" /> and packetData.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Packet.#ctor(System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Create a new packet
            </summary>
      <param name="packetTypeStr">The sending packet type</param>
      <param name="packetObject">The object to be sent</param>
      <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used to create this packet</param>
    </member>
    <member name="M:NetworkCommsDotNet.Packet.#ctor(System.String,System.String,System.Object,NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Create a new packet
            </summary>
      <param name="sendingPacketTypeStr">The sending packet type</param>
      <param name="requestReturnPacketTypeStr">The expected return packet type</param>
      <param name="packetObject">The object to be sent</param>
      <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to be used to create this packet</param>
    </member>
    <member name="M:NetworkCommsDotNet.Packet.SerialiseHeader(NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Returns the serialisedbytes of the packet header appended by the serialised header size. This is required to rebuild the header on receive.
            </summary>
      <returns>The serialised header as byte[]</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Packet.Dispose">
      <summary>
            Dispose of internal resources
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Packet.PacketHeader">
      <summary>
            Return the packet header for this packet
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.Packet.PacketData">
      <summary>
            Return the byte[] packet data
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.PacketHeaderLongItems">
      <summary>
            Any <see cref="T:NetworkCommsDotNet.PacketHeader" /> options which are stored as a long.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.PayloadPacketSize">
      <summary>
            The size of the packet data payload in bytes. This is a compulsory option.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.SerializerProcessors">
      <summary>
            The data serializer and data processor used to unwrap the payload. Used as flags.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.PacketCreationTime">
      <summary>
            The creation time of the packet header.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderLongItems.PacketSequenceNumber">
      <summary>
            The sequence number for this packet. Each connection maintains a unique counter which is increments on each sent packet.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.PacketHeaderStringItems">
      <summary>
            Any <see cref="T:NetworkCommsDotNet.PacketHeader" /> options which are stored as a string.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.PacketType">
      <summary>
            The type of the packet. This is a compulsory option which determines how the incoming packet is handled.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.ReceiveConfirmationRequired">
      <summary>
            Specifies if a receive confirmation is required for this packet. String option as takes up less space for a boolean option.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.RequestedReturnPacketType">
      <summary>
            The packet type which should be used for any return packet type.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.CheckSumHash">
      <summary>
            A checksum corresponding to the payload data.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.SourceNetworkIdentifier">
      <summary>
            The network identifier of the packet source
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.PacketHeaderStringItems.PacketIdentifier">
      <summary>
            Optional packet identifier.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.PacketHeader">
      <summary>
            Contains information required to send, receive and correctly rebuild any objects sent via NetworkCommsDotNet.
            Any data sent via NetworkCommsDotNet is always preceeded by a packetHeader.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.#ctor">
      <summary>
            Blank constructor required for deserialisation
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.#ctor(System.String,System.Int64,System.String,System.Boolean,System.String,System.Boolean)">
      <summary>
            Creates a new packetHeader
            </summary>
      <param name="packetTypeStr">The packet type to be used.</param>
      <param name="payloadPacketSize">The size on bytes of the payload</param>
      <param name="requestedReturnPacketTypeStr">An optional field representing the expected return packet type</param>
      <param name="receiveConfirmationRequired">An optional boolean stating that a receive confirmation is required for this packet</param>
      <param name="checkSumHash">An optional field representing the payload checksum</param>
      <param name="includeConstructionTime">An optional boolean which if true will record the DateTime this packet was created</param>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.ContainsOption(NetworkCommsDotNet.PacketHeaderStringItems)">
      <summary>
            Check if a string option has been set.
            </summary>
      <param name="option">The string option to be checked.</param>
      <returns>Returns true if the provided string option has been set.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.ContainsOption(NetworkCommsDotNet.PacketHeaderLongItems)">
      <summary>
            Check if a long option has been set.
            </summary>
      <param name="option">The long option to be checked.</param>
      <returns>Returns true if the provided long option has been set.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.GetOption(NetworkCommsDotNet.PacketHeaderLongItems)">
      <summary>
            Get a long option.
            </summary>
      <param name="option">The option to get</param>
      <returns>The requested long option</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.GetOption(NetworkCommsDotNet.PacketHeaderStringItems)">
      <summary>
            Get a string option
            </summary>
      <param name="options">The option to get</param>
      <returns>The requested string option</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.SetOption(NetworkCommsDotNet.PacketHeaderLongItems,System.Int64)">
      <summary>
            Set a long option with the provided value.
            </summary>
      <param name="option">The option to set</param>
      <param name="Value">The option value</param>
    </member>
    <member name="M:NetworkCommsDotNet.PacketHeader.SetOption(NetworkCommsDotNet.PacketHeaderStringItems,System.String)">
      <summary>
            Set a string option with the provided value.
            </summary>
      <param name="option">The option to set</param>
      <param name="Value">The option value</param>
    </member>
    <member name="P:NetworkCommsDotNet.PacketHeader.PayloadPacketSize">
      <summary>
            The total size in bytes of the payload.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PacketHeader.PacketType">
      <summary>
            The packet type.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.ReservedPacketType">
      <summary>
            Reserved packetTypeStrs. Removing or modifying these will prevent network comms from working
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.RuntimeEnvironment">
      <summary>
            Specifies the current runtime environment. Used for changing minor settings based on environment.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Native_Net4">
      <summary>
            Native .Net 4.0 - Default
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Mono_Net4">
      <summary>
            Mono .Net 4.0
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Native_Net35">
      <summary>
            Native .Net3.5
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Mono_Net35">
      <summary>
            Mono .Net 3.5
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Native_Net2">
      <summary>
            Native .Net 2
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Mono_Net2">
      <summary>
            Mono .Net 2
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.WindowsPhone_Silverlight">
      <summary>
            Windows Phone 7.1 (8) or Silverlight
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Xamarin_Android">
      <summary>
            Xamarin.Android
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.RuntimeEnvironment.Xamarin_iOS">
      <summary>
            Xamarin.iOS
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions">
      <summary>
            Contains options and flags for sending and receiving data such as serialisation method, data processors, encryption etc.
            Several static constructors are provided to help create SendReceiveOptions in the most common formats.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions.#ctor(DPSBase.DataSerializer,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class with a specified <see cref="T:DPSBase.DataSerializer" />, set of <see cref="T:DPSBase.DataProcessor" />s and and other options
            </summary>
      <param name="serializer">The <see cref="T:DPSBase.DataSerializer" /> to use</param>
      <param name="dataProcessors">The set of <see cref="T:DPSBase.DataProcessor" />s to use.  The order in the list determines the order the <see cref="T:DPSBase.DataProcessor" />s will be applied</param>
      <param name="options">Allows additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class providing only options for the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s.  This constructor should only be used when adding packet handlers for incoming connections
            </summary>
      <param name="options">Allows additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions.OptionsCompatible(NetworkCommsDotNet.SendReceiveOptions)">
      <summary>
            Determines whether the supplied <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> is compatible, from a serialization point of view, with this instance
            </summary>
      <param name="options">The <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> to compare against</param>
      <returns>True if the options are compatible, false otherwise</returns>
      <remarks>Two <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> instances will be compatible if they use the same <see cref="T:DPSBase.DataSerializer" /> and the same set of <see cref="T:DPSBase.DataProcessor" />s</remarks>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions.Clone">
      <summary>
            Create a deep clone of this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> object. 
            </summary>
      <returns>The cloned object</returns>
    </member>
    <member name="P:NetworkCommsDotNet.SendReceiveOptions.ReceiveConfirmationRequired">
      <summary>
            If true any packets sent with this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> will be forced to trigger a receive confirmation.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.SendReceiveOptions.IncludePacketConstructionTime">
      <summary>
            If true any packets sent with this <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> will include the packet creation time in the header.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.SendReceiveOptions.DataSerializer">
      <summary>
            Gets the <see cref="T:DPSBase.DataSerializer" /> that should be used when sending information
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.SendReceiveOptions.DataProcessors">
      <summary>
            Gets the <see cref="T:DPSBase.DataProcessor" />s that should be used when sending information. <see cref="T:DPSBase.DataProcessor" />s are applied in index order
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.SendReceiveOptions.Options">
      <summary>
            Gets the options that should be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s on object serialization and deserialization
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`1">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> is passed as a generic parameter and no <see cref="T:DPSBase.DataProcessor" />s are used. To provide additional options see other overrides. 
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> is passed as a generic parameter and no <see cref="T:DPSBase.DataProcessor" />s are used.  
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /></param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`2">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and a single <see cref="T:DPSBase.DataProcessor" /> while will be used are passed as generic parameters. To provide additional options see other overrides. 
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`2.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and a single <see cref="T:DPSBase.DataProcessor" /> while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" /> as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" /></param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`3">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of the first <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP2">The type of the second <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`3.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and 2 <see cref="T:DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`4">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of the first <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP2">The type of the second <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP3">The type of the third <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`4.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and 3 <see cref="T:DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`5">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of the first <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP2">The type of the second <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP3">The type of the third <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP4">The type of the fourth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`5.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and 4 <see cref="T:DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`6">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of the first <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP2">The type of the second <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP3">The type of the third <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP4">The type of the fourth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP5">The type of the fifth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`6.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and 5 <see cref="T:DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`7">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of the first <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP2">The type of the second <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP3">The type of the third <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP4">The type of the fourth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP5">The type of the fifth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP6">The type of the sixth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`7.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and 6 <see cref="T:DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="T:NetworkCommsDotNet.SendReceiveOptions`8">
      <inheritdoc />
      <typeparam name="T_DS">The type of <see cref="T:DPSBase.DataSerializer" /> to use</typeparam>
      <typeparam name="T_DP1">The type of the first <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP2">The type of the second <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP3">The type of the third <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP4">The type of the fourth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP5">The type of the fifth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP6">The type of the sixth <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
      <typeparam name="T_DP7">The type of the seventh <see cref="T:DPSBase.DataProcessor" /> to use</typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.SendReceiveOptions`8.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:NetworkCommsDotNet.SendReceiveOptions" /> class. The <see cref="T:DPSBase.DataSerializer" /> and 7 <see cref="T:DPSBase.DataProcessor" />s while will be used are passed as generic parameters
            Further options can be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s as an argument which may be null
            </summary>
      <param name="options">Additional options to be passed to the <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s</param>
    </member>
    <member name="T:NetworkCommsDotNet.Adler32Checksum">
      <summary>
            Implemenaton of the <see href="http://en.wikipedia.org/wiki/Adler-32">Adler32</see> checksum algorithm. 
            It is not a particularly reliable checksum compared with <see href="http://en.wikipedia.org/wiki/MD5">MD5</see> but it is about 10 times faster.
            NetworkCommsDotNet uses <see href="http://en.wikipedia.org/wiki/MD5">MD5</see> as its default but this class is provided should speed be the more important factor.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.Adler32Checksum.GenerateCheckSum(System.Byte[])">
      <summary>
            Generate an Adler32 checksum value based on the provided byte array.
            </summary>
      <param name="buffer">Buffer for which the checksum should be calculated.</param>
      <returns>The checksum value</returns>
    </member>
    <member name="M:NetworkCommsDotNet.Adler32Checksum.GenerateCheckSumSplitBuffer(System.Byte[][])">
      <summary>
            Generate a single Adler32 checksum value based on the provided byte arrays. Checksum calculated from splitBuffer[0] onwards.
            </summary>
      <param name="splitBuffer">Buffers for which the checksum should be calculated.</param>
      <returns>The checksum value</returns>
    </member>
    <member name="T:NetworkCommsDotNet.CommsMath">
      <summary>
            A simple class to do math operations in NetworkCommsDotNet. Primarly used for load detection.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.#ctor">
      <summary>
            Create a new empty instance of CommsMath
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
      <summary>
            Create a new empty instance of CommsMath
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.AddValue(System.Double)">
      <summary>
            Add a new value to the internal list
            </summary>
      <param name="value">The value to add</param>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.AddValue(System.Double,System.Double)">
      <summary>
            Add a new value to the internal list
            </summary>
      <param name="value">The value to add</param>
      <param name="weight">The weight to apply to the provided value</param>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.TrimList(System.Int32)">
      <summary>
            Trims the list to the provided maxCount. The most recently added items are preserved.
            </summary>
      <param name="maxCount">The maximum size of the list after being trimmed</param>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.ClearList">
      <summary>
            Reset the value list
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateMean">
      <summary>
            Return the mean of the current list.
            </summary>
      <returns>The mean of all values currently in the list.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateStdDeviation">
      <summary>
            Return the standard deviation of the current list.
            </summary>
      <returns>The standard deviation of all values currently in the list.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateMean(System.Int32)">
      <summary>
            Return the mean of the current list.
            </summary>
      <param name="lastNValues">If less than the number of items in the value list returns the mean of the lastNValues</param>
      <returns>The mean of relevant values</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateStdDeviation(System.Int32)">
      <summary>
            Return the standard deviation of the current list.
            </summary>
      <param name="lastNValues">If less than the number of items in the value list returns the mean of the lastNValues</param>
      <returns>The mean of relevant values</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateMean(System.Collections.Generic.List{System.Double})">
      <summary>
            Return the mean of the provided list of values
            </summary>
      <param name="localValues">Values for which a mean should be calculated</param>
      <returns>The mean of provided values</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateMean(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
      <summary>
            Return the mean of the provided list of values
            </summary>
      <param name="localValues">Values for which a mean should be calculated</param>
      <param name="weights">The weights to apply to the corresponding values</param>
      <returns>The mean of provided values</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateStdDeviation(System.Collections.Generic.List{System.Double})">
      <summary>
            Return the standard deviation of the provided list of values
            </summary>
      <param name="localValues">Values for which a standard deviation should be calculated</param>
      <returns>The standard deviation of provided values</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsMath.CalculateStdDeviation(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double})">
      <summary>
            Return the standard deviation of the provided list of values
            </summary>
      <param name="localValues">Values for which a standard deviation should be calculated</param>
      <param name="weights">The weights to apply to the corresponding values</param>
      <returns>The standard deviation of provided values</returns>
    </member>
    <member name="P:NetworkCommsDotNet.CommsMath.Count">
      <summary>
            Returns the number of values in this object
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.CommsThreadPool">
      <summary>
            A compact thread pool used by NetworkComms.Net to run packet handlers
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.SyncRoot">
      <summary>
            A sync object to make things thread safe
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.threadDict">
      <summary>
            Dictionary of threads, index is ThreadId
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.workerInfoDict">
      <summary>
            Dictionary of thread worker info, index is ThreadId
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.ThreadWaitSleepJoinCountUpdateInterval">
      <summary>
            The minimum timespan between thread wait sleep join updates
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.requireJobThreadsCount">
      <summary>
            A quick lookup of the number of current threads which are idle and require jobs
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.jobQueue">
      <summary>
            Priority queue used to order call backs 
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.CommsThreadPool.shutdown">
      <summary>
            Set to true to ensure correct shutdown of worker threads.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.#ctor(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Create a new comms thread pool
            </summary>
      <param name="minThreadsCount">Minimum number of idle threads to maintain in the pool</param>
      <param name="maxActiveThreadsCount">The maximum number of active (i.e. not waiting for IO) threads</param>
      <param name="maxTotalThreadsCount">Maximum number of threads to create in the pool</param>
      <param name="threadIdleTimeoutClose">Timespan after which an idle thread will close</param>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.BeginShutdown">
      <summary>
            Prevent any additional threads from starting. Returns immediately.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.EndShutdown(System.Int32)">
      <summary>
            Prevent any additional threads from starting and return once all existing workers have completed.
            </summary>
      <param name="threadShutdownTimeoutMS">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.EnqueueItem(NetworkCommsDotNet.QueueItemPriority,System.Threading.WaitCallback,System.Object)">
      <summary>
             Enqueue a callback to the thread pool.
            </summary>
      <param name="priority">The priority with which to enqueue the provided callback</param>
      <param name="callback">The callback to execute</param>
      <param name="state">The state parameter to pass to the callback when executed</param>
      <returns>Returns the managed threadId running the callback if one was available, otherwise -1</returns>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.ThreadWorker(System.Object)">
      <summary>
            The worker object for the thread pool
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.UpdateThreadWaitSleepJoinCountCache">
      <summary>
            Returns the total number of threads in the pool which are waiting for IO
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.CommsThreadPool.ToString">
      <summary>
            Provides a brief string summarisation the state of the thread pool
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.ThreadIdleTimeoutClose">
      <summary>
            The timespan after which an idle thread will close
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.MaxTotalThreadsCount">
      <summary>
            The maximum number of threads to create in the pool
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.MaxActiveThreadsCount">
      <summary>
            The maximum number of active threads in the pool. This can be less than MaxTotalThreadsCount, taking account of waiting threads.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.MinThreadsCount">
      <summary>
            The minimum number of idle threads to maintain in the pool
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.CurrentNumWaitSleepJoinThreadsCache">
      <summary>
            The most recent count of pool threads which are waiting for IO
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.LastThreadWaitSleepJoinCountCacheUpdate">
      <summary>
            The dateTime associated with the most recent count of pool threads which are waiting for IO
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.CurrentNumTotalThreads">
      <summary>
            The total number of threads currently in the thread pool
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.CurrentNumIdleThreads">
      <summary>
            The total number of idle threads currently in the thread pool
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.CommsThreadPool.QueueCount">
      <summary>
            The total number of items currently waiting to be collected by a thread
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.WorkerInfo.SetInsideCallBack">
      <summary>
            Set InsideCallBack to true
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.WorkerInfo.ClearInsideCallBack">
      <summary>
            Set InsideCallBack to false
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.WorkerInfo.SetThreadIdle">
      <summary>
            Set threadIdle to true
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.WorkerInfo.ClearThreadIdle">
      <summary>
            Set threadIdle to false
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.WaitCallBackWrapper">
      <summary>
            A private wrapper used by CommsThreadPool
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.IPExtAccess">
      <summary>
            Used to determine a valid local <see href="http://en.wikipedia.org/wiki/IP_address">IP address</see>, using the Windows API, to provided targets. This method is only supported in a Windows environment.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.IPExtAccess.AttemptBestIPAddressGuess(System.Net.IPAddress)">
      <summary>
            Attempts to guess the best local <see cref="T:System.Net.IPAddress" /> of this machine for accessing the provided target <see cref="T:System.Net.IPAddress" />.
            </summary>
      <param name="targetIPAddress">The target IP which should be used to determine the best adaptor. e.g. Either a local network or public IP address.</param>
      <returns>Local <see cref="T:System.Net.IPAddress" /> which is best used to contact that provided target.</returns>
    </member>
    <member name="T:NetworkCommsDotNet.IPTools">
      <summary>
            A collection of tools for deadling with <see href="http://en.wikipedia.org/wiki/IP_address">IP addresses</see>.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.IPTools.ParseEndPointFromString(System.String)">
      <summary>
            Converts an IPAddress in string form (IPv4 or IPv6) with an appended port number, e.g. 192.168.0.10:10000 or ::1:10000, into an <see cref="T:System.Net.IPEndPoint" />.
            </summary>
      <param name="ipAddressAndPort">The IP and Port to be parsed</param>
      <returns>The equivalent <see cref="T:System.Net.IPEndPoint" /></returns>
    </member>
    <member name="T:NetworkCommsDotNet.PacketBuilder">
      <summary>
            Packet data is generally broken into multiple variable sized byte chunks or 'partial packets'. This class provides features to effortlessly rebuild whole packets.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.#ctor">
      <summary>
            Create a new instance of the ConnectionPacketBuilder class
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.ClearNTopBytes(System.Int32)">
      <summary>
            Clear N bytes from cache, starting with oldest bytes first.
            </summary>
      <param name="numBytesToRemove">The total number of bytes to be removed.</param>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.AddPartialPacket(System.Int32,System.Byte[])">
      <summary>
            Add a partial packet to the end of the cache by reference.
            </summary>
      <param name="packetBytes">The number of valid bytes in the provided partial packet</param>
      <param name="partialPacket">A buffer which may or may not be full with valid bytes</param>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.RemoveMostRecentPartialPacket(System.Int32@)">
      <summary>
            Returns the most recently cached partial packet and removes it from the cache.
            Used to more efficiently utilise allocated memory space.
            </summary>
      <param name="lastPacketBytesRead">The number of valid bytes in the last partial packet added</param>
      <returns>A byte[] corresponding with the last added partial packet</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.NumUnusedBytesMostRecentPartialPacket">
      <summary>
            Returns the number of unused bytes in the most recently cached partial packet.
            </summary>
      <returns>The number of unused bytes in the most recently cached partial packet.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.FirstByte">
      <summary>
            Returns the value of the first cached byte.
            </summary>
      <returns>The value of the first cached byte.</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.GetAllData">
      <summary>
            Copies all cached bytes into a single array and returns. Original data is left unchanged.
            </summary>
      <returns>All cached data as a single byte[]</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PacketBuilder.ReadDataSection(System.Int32,System.Int32)">
      <summary>
            Copies the requested cached bytes into a single array and returns. Original data is left unchanged.
            </summary>
      <param name="startIndex">The inclusive byte index to use as the starting position.</param>
      <param name="length">The total number of desired bytes.</param>
      <returns>The requested bytes as a single array.</returns>
    </member>
    <member name="P:NetworkCommsDotNet.PacketBuilder.Locker">
      <summary>
            Locker object used for performing thread safe operations over this packet builder
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PacketBuilder.TotalBytesCached">
      <summary>
            The total number of cached bytes. This is the sum of all bytes across all cached partial packets. See <see cref="P:NetworkCommsDotNet.PacketBuilder.TotalPartialPacketCount" />.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PacketBuilder.TotalPartialPacketCount">
      <summary>
            The total number of cached partial packets. This is different from <see cref="P:NetworkCommsDotNet.PacketBuilder.TotalBytesCached" /> because each partial packet may contain a variable number of bytes.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PacketBuilder.TotalBytesExpected">
      <summary>
            The total number of bytes required to rebuild the next whole packet.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.PacketTypeUnwrapper">
      <summary>
            Wrapper used to track the sendReceiveOptions for different packet types.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.IPacketTypeHandlerDelegateWrapper">
      <summary>
            The following packetTypeHandlerDelegateWrappers are required so that we can do the totally general and awesome object cast on deserialise.
            If there is a way of achieving the same without these wrappers please let us know.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.PriorityQueue`1">
      <summary>
            Custom queue which contains features to add and remove items using a basic priority model.
            </summary>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.#ctor">
      <summary>
            Create a new instance of the priority queue.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.TryAdd(System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.QueueItemPriority,`0})">
      <summary>
            Try adding an item to the priority queue.
            </summary>
      <param name="item">Key is priority, lower number is lower priority, and value is TValue</param>
      <returns>True if an item was succesfully added to the queue</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.TryTake(System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.QueueItemPriority,`0}@)">
      <summary>
            Try removing an item from the priority queue
            </summary>
      <param name="item">Key is priority, lower number is lower priority, and value is TValue</param>
      <returns>True if an item was succesfully removed from the queue</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.TryTake(NetworkCommsDotNet.QueueItemPriority,System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.QueueItemPriority,`0}@)">
      <summary>
            Try removing an item from the priority queue which has a priority of atleast that provided.
            </summary>
      <param name="minimumPriority">The miniumum priority to consider</param>
      <param name="item">Key is priority, lower number is lower priority, and value is TValue</param>
      <returns>True if an item was succesfully removed from the queue</returns>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.CopyTo(System.Collections.Generic.KeyValuePair{NetworkCommsDotNet.QueueItemPriority,`0}[],System.Int32)">
      <summary>
            Copies queued items into the provided destination array. Highest priority items first descending until destination is full or there are no remaining items.
            </summary>
      <param name="destination">The destination array</param>
      <param name="destStartingIndex">The position within destination to start copying to</param>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.ToArray">
      <summary>
            Returns all queued items as a 1D array. Highest priority items first descending.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.PriorityQueue`1.Clear">
      <summary>
            Clear the content of all queues
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PriorityQueue`1.Count">
      <summary>
            The total number of items currently queued.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PriorityQueue`1.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the PriorityQueue is synchronized (thread safe). Always returns true.
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.PriorityQueue`1.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the PriorityQueue. Throws an exception as all access is explicitly thread safe.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.PriorityQueueItem">
      <summary>
            Private wrapper class used for passing data to the incoming packet item worker
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.QueueItemPriority">
      <summary>
            A list of priorities used to handle incoming packets
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.QueueItemPriority.Lowest">
      <summary>
            The System.Threading.Thread can be scheduled after threads with any other priority.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.QueueItemPriority.BelowNormal">
      <summary>
             The System.Threading.Thread can be scheduled after threads with Normal priority and before those with Lowest priority.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.QueueItemPriority.Normal">
      <summary>
            The System.Threading.Thread can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.QueueItemPriority.AboveNormal">
      <summary>
            The System.Threading.Thread can be scheduled after threads with Highest priority and before those with Normal priority.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.QueueItemPriority.Highest">
      <summary>
            The System.Threading.Thread can be scheduled before threads with any other priority.
            </summary>
    </member>
    <member name="T:NetworkCommsDotNet.ShortGuid">
      <summary>
            Represents a shortform globally unique identifier (<see href="http://en.wikipedia.org/wiki/Globally_unique_identifier">GUID</see>) which is easier to handle than Guid.NewGuid(). 
            This class is used to uniquely identify a peer/application using NetworkCommsDotNet.
            See <see href="http://www.singular.co.nz/blog/archive/2007/12/20/shortguid-a-shorter-and-url-friendly-guid-in-c-sharp.aspx">here</see> for original source.
            </summary>
    </member>
    <member name="F:NetworkCommsDotNet.ShortGuid.Empty">
      <summary>
            A read-only instance of the ShortGuid class whose value
            is guaranteed to be all zeroes.
            </summary>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.#ctor(System.String)">
      <summary>
            Creates a ShortGuid from a base64 encoded string
            </summary>
      <param name="value">The encoded guid as a
            base64 string</param>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.#ctor(System.Guid)">
      <summary>
            Creates a ShortGuid from a Guid
            </summary>
      <param name="guid">The Guid to encode</param>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.ToString">
      <summary>
            Returns the base64 encoded guid as a string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance and a
            specified Object represent the same type and value.
            </summary>
      <param name="obj">The object to compare</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.GetHashCode">
      <summary>
            Returns the HashCode for underlying Guid.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.NewGuid">
      <summary>
            Initialises a new instance of the ShortGuid class
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.Encode(System.String)">
      <summary>
            Creates a new instance of a Guid using the string value,
            then returns the base64 encoded version of the Guid.
            </summary>
      <param name="value">An actual Guid string (i.e. not a ShortGuid)</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.Encode(System.Guid)">
      <summary>
            Encodes the given Guid as a base64 string that is 22
            characters long.
            </summary>
      <param name="guid">The Guid to encode</param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.Decode(System.String)">
      <summary>
            Decodes the given base64 string
            </summary>
      <param name="value">The base64 encoded string of a Guid</param>
      <returns>A new Guid</returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.op_Equality(NetworkCommsDotNet.ShortGuid,NetworkCommsDotNet.ShortGuid)">
      <summary>
            Determines if both ShortGuids have the same underlying
            Guid value.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.op_Inequality(NetworkCommsDotNet.ShortGuid,NetworkCommsDotNet.ShortGuid)">
      <summary>
            Determines if both ShortGuids do not have the
            same underlying Guid value.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.op_Implicit(NetworkCommsDotNet.ShortGuid)~System.String">
      <summary>
            Implicitly converts the ShortGuid to it's string equivilent
            </summary>
      <param name="shortGuid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.op_Implicit(NetworkCommsDotNet.ShortGuid)~System.Guid">
      <summary>
            Implicitly converts the ShortGuid to it's Guid equivilent
            </summary>
      <param name="shortGuid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.op_Implicit(System.String)~NetworkCommsDotNet.ShortGuid">
      <summary>
            Implicitly converts the string to a ShortGuid
            </summary>
      <param name="shortGuid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NetworkCommsDotNet.ShortGuid.op_Implicit(System.Guid)~NetworkCommsDotNet.ShortGuid">
      <summary>
            Implicitly converts the Guid to a ShortGuid
            </summary>
      <param name="guid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NetworkCommsDotNet.ShortGuid.Guid">
      <summary>
            Gets/sets the underlying Guid
            </summary>
    </member>
    <member name="P:NetworkCommsDotNet.ShortGuid.Value">
      <summary>
            Gets/sets the underlying base64 encoded string
            </summary>
    </member>
    <member name="T:DPSBase.AsyncStreamCopier">
      <summary>
            The Async Copier class reads the input Stream Async and writes Synchronously
            </summary>
    </member>
    <member name="M:DPSBase.AsyncStreamCopier.#ctor">
      <summary>
            Initialise a new instance of the asyncStreamCopier
            </summary>
    </member>
    <member name="M:DPSBase.AsyncStreamCopier.Start(System.IO.Stream,System.IO.Stream)">
      <summary>
            Starts the async copy
            </summary>
      <param name="input">Input stream</param>
      <param name="output">Output stream</param>
    </member>
    <member name="M:DPSBase.AsyncStreamCopier.CopyStreamTo(System.IO.Stream,System.IO.Stream)">
      <summary>
            Copy contents of source into destination
            </summary>
      <param name="source">
      </param>
      <param name="destination">
      </param>
    </member>
    <member name="E:DPSBase.AsyncStreamCopier.Completed">
      <summary>
            Event raised when copy has completed
            </summary>
    </member>
    <member name="T:DPSBase.DataSerializer">
      <summary>
            Provides methods that convert an <see cref="T:System.Object" /> into a <see cref="T:System.Byte" />[]
            </summary>
    </member>
    <member name="M:DPSBase.DataSerializer.GetInstance``1">
      <summary>
            Helper function to allow a <see cref="T:DPSBase.DataSerializer" /> to be implemented as a singleton.  Returns the singleton instance generated by the <see cref="T:DPSBase.DPSManager" /></summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:DPSBase.DataSerializer" /> to retrieve from the <see cref="T:DPSBase.DPSManager" /></typeparam>
      <returns>The singleton instance generated by the <see cref="T:DPSBase.DPSManager" /></returns>
    </member>
    <member name="M:DPSBase.DataSerializer.SerialiseDataObject``1(``0)">
      <summary>
            Converts objectToSerialize to an array of bytes. Uses no data processors.
            </summary>
      <typeparam name="T">Type of object to serialize</typeparam>
      <param name="objectToSerialise">Object to serialize</param>
      <returns>Serialized array of bytes</returns>
    </member>
    <member name="M:DPSBase.DataSerializer.SerialiseDataObject``1(``0,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Converts objectToSerialize to an array of bytes using the data processors and options provided.
            </summary>
      <typeparam name="T">Type of object to serialize</typeparam>
      <param name="objectToSerialise">Object to serialize</param>
      <param name="dataProcessors">Data processors to apply to serialised data.  These will be run in index order i.e. low index to high</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
      <returns>Serialized array of bytes</returns>
    </member>
    <member name="M:DPSBase.DataSerializer.DeserialiseDataObject``1(System.Byte[])">
      <summary>
            Converts array of bytes previously serialized to an object of provided type. Assumes no data processors.
            </summary>
      <typeparam name="T">Type of object to deserialize to</typeparam>
      <param name="receivedObjectBytes">Byte array containing serialized and compressed object</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:DPSBase.DataSerializer.DeserialiseDataObject``1(System.IO.MemoryStream)">
      <summary>
            Converts a memory stream containing bytes previously serialized to an object of provided type. Assumes no data processors.
            </summary>
      <typeparam name="T">Type of object to deserialize to</typeparam>
      <param name="receivedObjectStream">Byte array containing serialized and compressed object</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:DPSBase.DataSerializer.DeserialiseDataObject``1(System.Byte[],System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Converts bytes previously serialized and processed using data processors to an object of provided type
            </summary>
      <typeparam name="T">Type of object to deserialize to</typeparam>
      <param name="receivedObjectBytes">Byte array containing serialized and compressed object</param>
      <param name="dataProcessors">Data processors to apply to serialised data.  These will be run in reverse order i.e. high index to low</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:DPSBase.DataSerializer.DeserialiseDataObject``1(System.IO.MemoryStream,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Converts a memory stream containing bytes previously serialized and processed using data processors to an object of provided type
            </summary>
      <typeparam name="T">Type of object to deserialize to</typeparam>
      <param name="receivedObjectStream">Byte array containing serialized and compressed object</param>
      <param name="dataProcessors">Data processors to apply to serialised data.  These will be run in reverse order i.e. high index to low</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:DPSBase.DataSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Serialises an object to a stream using any relavent options provided
            </summary>
      <param name="ouputStream">The stream to serialise to</param>
      <param name="objectToSerialise">The object to serialise</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
    </member>
    <member name="M:DPSBase.DataSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Deserialises the data in a stream to an object of the spcified type using any relavent provided options 
            </summary>
      <param name="inputStream">The stream containing the serialised object</param>
      <param name="resultType">The return object Type</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
      <returns>The deserialised object</returns>
    </member>
    <member name="P:DPSBase.DataSerializer.Identifier">
      <summary>
            Returns a unique identifier for the serializer type.  Used in automatic serialization/compression detection
            </summary>
    </member>
    <member name="T:DPSBase.BinaryFormaterSerializer">
      <summary>
            DataSerializer that uses .Net <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> to perform <see cref="T:System.Object" /> serialization
            </summary>
    </member>
    <member name="M:DPSBase.BinaryFormaterSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
      <inheritdoc />
    </member>
    <member name="M:DPSBase.BinaryFormaterSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
      <inheritdoc />
    </member>
    <member name="P:DPSBase.BinaryFormaterSerializer.Instance">
      <summary>
            Instance singleton used to access serializer instance.  Use instead <see cref="M:DPSBase.DPSManager.GetDataSerializer``1" /></summary>
    </member>
    <member name="T:DPSBase.DataProcessor">
      <summary>
            Provides methods that process data in a <see cref="T:System.IO.Stream" /> into another <see cref="T:System.IO.Stream" />.  Can be used to provide features such as data compression or encryption
            </summary>
      <example>
        <code source="..\DPSBase\RijndaelPSKEncrypter.cs" lang="cs" title="Implementation Example" />
      </example>
    </member>
    <member name="M:DPSBase.DataProcessor.GetInstance``1">
      <summary>
            Helper function to allow a <see cref="T:DPSBase.DataProcessor" /> to be implemented as a singleton.  Returns the singleton instance generated by the <see cref="T:DPSBase.DPSManager" /></summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:DPSBase.DataProcessor" /> to retrieve from the <see cref="T:DPSBase.DPSManager" /></typeparam>
      <returns>The singleton instance generated by the <see cref="T:DPSBase.DPSManager" /></returns>
    </member>
    <member name="M:DPSBase.DataProcessor.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
      <summary>
            Processes data held in a stream and outputs it to another stream
            </summary>
      <param name="inStream">An input stream containing data to be processed</param>
      <param name="outStream">An output stream to which the processed data is written</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
      <param name="writtenBytes">The size of the data written to the output stream</param>
    </member>
    <member name="M:DPSBase.DataProcessor.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
      <summary>
            Processes data, in reverse, that is held in a stream and outputs it to another stream
            </summary>
      <param name="inStream">An input stream containing data to be processed</param>
      <param name="outStream">An output stream to which the processed data is written</param>
      <param name="options">Options dictionary for serialisation/data processing</param>
      <param name="writtenBytes">The size of the data written to the output stream</param>
    </member>
    <member name="P:DPSBase.DataProcessor.Identifier">
      <summary>
            Returns a unique identifier for the compressor type. Used in automatic serialization/compression detection
            </summary>
    </member>
    <member name="T:DPSBase.ArraySerializer">
      <summary>
            Class that provides optimised method for serializing arrays of primitive data types.
            </summary>
    </member>
    <member name="M:DPSBase.ArraySerializer.SerialiseArrayObject(System.Object,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Serializes objectToSerialize to a byte array using compression provided by compressor if T is an array of primitives.  Otherwise returns default value for T.  Override 
            to serialize other types
            </summary>
      <param name="objectToSerialise">Object to serialize</param>
      <param name="dataProcessors">The compression provider to use</param>
      <param name="options">Options to be used during serialization and processing of data</param>
      <returns>The serialized and compressed bytes of objectToSerialize</returns>
    </member>
    <member name="M:DPSBase.ArraySerializer.DeserialiseArrayObject(System.IO.MemoryStream,System.Type,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Deserializes data object held as compressed bytes in receivedObjectBytes using compressor if desired type is an array of primitives
            </summary>
      <param name="inputStream">Byte array containing serialized and compressed object</param>
      <param name="dataProcessors">Compression provider to use</param>
      <param name="objType">The <see cref="T:System.Type" /> of the <see cref="T:System.Object" /> to be returned</param>
      <param name="options">Options to be used during deserialization and processing of data</param>
      <returns>The deserialized object if it is an array, otherwise null</returns>
    </member>
    <member name="T:DPSBase.StreamSendWrapperSerializer">
      <summary>
            Class that provides optimised method for serializing arrays of primitive data types.
            </summary>
    </member>
    <member name="M:DPSBase.StreamSendWrapperSerializer.SerialiseStreamSendWrapper(DPSBase.StreamSendWrapper,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Serializes StreamSendWrapper to a StreamSendWrapper possibly using provided data processors.  If there are no data processor streamSendWrapperToSerialize will be returned.
            </summary>
      <param name="streamSendWrapperToSerialize">StreamSendWrapper to serialize</param>
      <param name="dataProcessors">The compression provider to use</param>
      <param name="options">Options to be used during serialization and processing of data</param>
      <returns>The serialized and compressed bytes of objectToSerialize</returns>
    </member>
    <member name="M:DPSBase.StreamSendWrapperSerializer.DeserialiseStreamSendWrapper(System.Byte[],System.Type,System.Collections.Generic.List{DPSBase.DataProcessor},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Deserializes data object held as compressed bytes in receivedObjectBytes using compressor if desired type is a <see cref="T:DPSBase.StreamSendWrapper" /></summary>
      <param name="receivedObjectBytes">Byte array containing serialized and compressed object</param>
      <param name="dataProcessors">Compression provider to use</param>
      <param name="objType">The <see cref="T:System.Type" /> of the <see cref="T:System.Object" /> to be returned</param>
      <param name="options">Options to be used during deserialization and processing of data</param>
      <returns>The deserialized object if it is an array, otherwise null</returns>
    </member>
    <member name="T:DPSBase.DataSerializerProcessorAttribute">
      <summary>
            Custom attribute used to keep track of serializers and proccesors
            </summary>
    </member>
    <member name="M:DPSBase.DataSerializerProcessorAttribute.#ctor(System.Byte)">
      <summary>
            Create a new instance of this attribute
            </summary>
      <param name="identifier">
      </param>
    </member>
    <member name="P:DPSBase.DataSerializerProcessorAttribute.Identifier">
      <summary>
            A byte identifier, unique amongst all serialisers and data processors.
            </summary>
    </member>
    <member name="T:DPSBase.DPSManager">
      <summary>
            Automatically detects and manages the use of <see cref="T:DPSBase.DataSerializer" /> and <see cref="T:DPSBase.DataProcessor" />s.  Any <see cref="T:DPSBase.DataSerializer" /> or <see cref="T:DPSBase.DataProcessor" /> in an assembly located in the working directory (including subdirectories) will be automatically detected
            </summary>
    </member>
    <member name="M:DPSBase.DPSManager.GetDataSerializer``1">
      <summary>
            Retrieves the singleton instance of the <see cref="T:DPSBase.DataSerializer" /> with <see cref="T:System.Type" /> T
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:DPSBase.DataSerializer" /> to retrieve </typeparam>
      <returns>The retrieved singleton instance of the desired <see cref="T:DPSBase.DataSerializer" /></returns>
    </member>
    <member name="M:DPSBase.DPSManager.GetDataSerializer(System.Byte)">
      <summary>
            Retrieves the singleton instance of the <see cref="T:DPSBase.DataSerializer" /> corresponding to a given id
            </summary>
      <param name="Id">The identifier corresponding to the desired <see cref="T:DPSBase.DataSerializer" /></param>
      <returns>The retrieved singleton instance of the desired <see cref="T:DPSBase.DataSerializer" /></returns>
    </member>
    <member name="M:DPSBase.DPSManager.GetDataProcessor``1">
      <summary>
            Retrieves the singleton instance of the <see cref="T:DPSBase.DataProcessor" /> with <see cref="T:System.Type" /> T
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the <see cref="T:DPSBase.DataProcessor" /> to retrieve </typeparam>
      <returns>The retrieved singleton instance of the desired <see cref="T:DPSBase.DataProcessor" /></returns>
    </member>
    <member name="M:DPSBase.DPSManager.GetDataProcessor(System.Byte)">
      <summary>
            Retrieves the singleton instance of the <see cref="T:DPSBase.DataProcessor" /> corresponding to a given id
            </summary>
      <param name="Id">The identifier corresponding to the desired <see cref="T:DPSBase.DataProcessor" /></param>
      <returns>The retrieved singleton instance of the desired <see cref="T:DPSBase.DataProcessor" /></returns>
    </member>
    <member name="M:DPSBase.DPSManager.AddDataProcessor(DPSBase.DataProcessor)">
      <summary>
            Allows the addition of <see cref="T:DPSBase.DataProcessor" />s which are not autodetected.  Use only if the assmbley in which the <see cref="T:DPSBase.DataProcessor" /> is defined is not in the working directory (including subfolders) or if automatic detection is not supported on your platform
            </summary>
      <param name="dataProcessor">The <see cref="T:DPSBase.DataProcessor" /> to make the <see cref="T:DPSBase.DPSManager" /> aware of</param>
      <exception cref="T:System.ArgumentException">Thrown if A different <see cref="T:DPSBase.DataProcessor" /> of the same <see cref="T:System.Type" /> or Id has already been added to the <see cref="T:DPSBase.DPSManager" /></exception>
    </member>
    <member name="M:DPSBase.DPSManager.AddDataProcessor``1">
      <summary>
            Allows the addition of <see cref="T:DPSBase.DataProcessor" />s which are not autodetected.  Use only if the assmbley in which the <see cref="T:DPSBase.DataProcessor" /> is defined is not in the working directory (including subfolders) or if automatic detection is not supported on your platform
            </summary>
      <typeparam name="T">The type of <see cref="T:DPSBase.DataProcessor" /> to make the <see cref="T:DPSBase.DPSManager" /> aware of</typeparam>
      <exception cref="T:System.ArgumentException">Thrown if a different <see cref="T:DPSBase.DataProcessor" /> of the same <see cref="T:System.Type" /> or Id has already been added to the <see cref="T:DPSBase.DPSManager" /> or if the <see cref="T:DPSBase.DataProcessor" /> type does not have a hidden or visible paramerterless constructor</exception>
    </member>
    <member name="M:DPSBase.DPSManager.AddDataSerializer(DPSBase.DataSerializer)">
      <summary>
            Allows the addition of <see cref="T:DPSBase.DataSerializer" />s which are not autodetected.  Use only if the assmbley in which the <see cref="T:DPSBase.DataSerializer" /> is defined is not in the working directory (including subfolders) or if automatic detection is not supported on your platform
            </summary>
      <param name="dataSerializer">The <see cref="T:DPSBase.DataSerializer" /> to make the see <see cref="T:DPSBase.DPSManager" /> aware of</param>
      <exception cref="T:System.ArgumentException">Thrown if A different <see cref="T:DPSBase.DataSerializer" /> of the same <see cref="T:System.Type" /> or Id has already been added to the <see cref="T:DPSBase.DPSManager" /></exception>
    </member>
    <member name="M:DPSBase.DPSManager.AddDataSerializer``1">
      <summary>
            Allows the addition of <see cref="T:DPSBase.DataSerializer" />s which are not autodetected.  Use only if the assmbley in which the <see cref="T:DPSBase.DataSerializer" /> is defined is not in the working directory (including subfolders) or if automatic detection is not supported on your platform
            </summary>
      <typeparam name="T">The type of <see cref="T:DPSBase.DataSerializer" /> to make the <see cref="T:DPSBase.DPSManager" /> aware of</typeparam>
      <exception cref="T:System.ArgumentException">Thrown if a different <see cref="T:DPSBase.DataSerializer" /> of the same <see cref="T:System.Type" /> or Id has already been added to the <see cref="T:DPSBase.DPSManager" /> or if the <see cref="T:DPSBase.DataSerializer" /> type does not have a hidden or visible paramerterless constructor</exception>
    </member>
    <member name="M:DPSBase.DPSManager.CreateSerializerDataProcessorIdentifier(DPSBase.DataSerializer,System.Collections.Generic.List{DPSBase.DataProcessor})">
      <summary>
            Generates an <see cref="T:System.Int64" /> describing a <see cref="T:DPSBase.DataSerializer" /> and a set of <see cref="T:DPSBase.DataProcessor" />s
            </summary>
      <param name="serializer">The <see cref="T:DPSBase.DataSerializer" /> to be used</param>
      <param name="dataProcessors">A <see cref="M:System.Collections.Generic.List`1.#ctor" /> to be used.  The order of this </param>
      <returns>A <see cref="T:System.Int64" /> describing the arguments</returns>
      <exception cref="T:System.ArgumentException">Thrown is more than 7 <see cref="T:DPSBase.DataSerializer" />s are used</exception>
      <remarks>This method is used to specify succinctly the serialization method and any data processing that will be used when transmitting data using NetworkCommsDotNet</remarks>
    </member>
    <member name="M:DPSBase.DPSManager.GetSerializerDataProcessorsFromIdentifier(System.Int64,DPSBase.DataSerializer@,System.Collections.Generic.List{DPSBase.DataProcessor}@)">
      <summary>
            Takes an identifier generated using <see cref="M:DPSBase.DPSManager.CreateSerializerDataProcessorIdentifier(DPSBase.DataSerializer,System.Collections.Generic.List{DPSBase.DataProcessor})" /> and returns the <see cref="T:DPSBase.DataSerializer" /> and set of <see cref="T:DPSBase.DataProcessor" />s used to generate the identifier
            </summary>
      <param name="id">The <see cref="T:System.Int64" /> describing the <see cref="T:DPSBase.DataSerializer" /> and a set of <see cref="T:DPSBase.DataProcessor" />s</param>
      <param name="serializer">The resultant <see cref="T:DPSBase.DataSerializer" /></param>
      <param name="dataProcessors">A List of the resultant <see cref="T:DPSBase.DataProcessor" />s</param>
      <remarks>This method is used to extract the serialization method and any data processing that needs to be used when transmitting data using NetworkCommsDotNet</remarks>
    </member>
    <member name="T:DPSBase.CommsException">
      <summary>
            Base comms exception. All NetworkCommsDotNet exceptions can be caught in a single catch block by using catch(<see cref="T:DPSBase.CommsException" />)
            </summary>
    </member>
    <member name="M:DPSBase.CommsException.#ctor">
      <summary>
            Create a new instance of CommsException
            </summary>
    </member>
    <member name="M:DPSBase.CommsException.#ctor(System.String)">
      <summary>
            Create a new instance of CommsException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.CommsException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of CommsException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.CommsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.CheckSumException">
      <summary>
            A checksum error has occured. NetworkComms.EnablePacketCheckSumValidation must be set to true for this exception to be thrown.
            </summary>
    </member>
    <member name="M:DPSBase.CheckSumException.#ctor">
      <summary>
            Create a new instance of CheckSumException
            </summary>
    </member>
    <member name="M:DPSBase.CheckSumException.#ctor(System.String)">
      <summary>
            Create a new instance of CheckSumException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.CheckSumException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of CheckSumException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.CheckSumException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.ConfirmationTimeoutException">
      <summary>
            A timeout has occured while waiting for a confirmation packet to be received. Check for errors and or consider increasing NetworkComms.PacketConfirmationTimeoutMS
            </summary>
    </member>
    <member name="M:DPSBase.ConfirmationTimeoutException.#ctor">
      <summary>
            Create a new instance of ConfirmationTimeoutException
            </summary>
    </member>
    <member name="M:DPSBase.ConfirmationTimeoutException.#ctor(System.String)">
      <summary>
            Create a new instance of ConfirmationTimeoutException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.ConfirmationTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of ConfirmationTimeoutException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.ConfirmationTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.ExpectedReturnTimeoutException">
      <summary>
            A timeout has occured while waiting for an expected return object. Check for errors and or consider increasing the provided return timeout value.
            </summary>
    </member>
    <member name="M:DPSBase.ExpectedReturnTimeoutException.#ctor">
      <summary>
            Create a new instance of ExpectedReturnTimeoutException
            </summary>
    </member>
    <member name="M:DPSBase.ExpectedReturnTimeoutException.#ctor(System.String)">
      <summary>
            Create a new instance of ExpectedReturnTimeoutException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.ExpectedReturnTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of ExpectedReturnTimeoutException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.ExpectedReturnTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.SerialisationException">
      <summary>
            An error occured while trying to serialise/compress or deserialise/uncompress an object.
            </summary>
    </member>
    <member name="M:DPSBase.SerialisationException.#ctor">
      <summary>
            Create a new instance of SerialisationException
            </summary>
    </member>
    <member name="M:DPSBase.SerialisationException.#ctor(System.String)">
      <summary>
            Create a new instance of SerialisationException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.SerialisationException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of SerialisationException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.SerialisationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.ConnectionSetupException">
      <summary>
            An error occured while trying to establish a Connection
            </summary>
    </member>
    <member name="M:DPSBase.ConnectionSetupException.#ctor">
      <summary>
            Create a new instance of ConnectionSetupException
            </summary>
    </member>
    <member name="M:DPSBase.ConnectionSetupException.#ctor(System.String)">
      <summary>
            Create a new instance of ConnectionSetupException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.ConnectionSetupException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of ConnectionSetupException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.ConnectionSetupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.ConnectionShutdownException">
      <summary>
            An error occured while trying to establish a Connection
            </summary>
    </member>
    <member name="M:DPSBase.ConnectionShutdownException.#ctor">
      <summary>
            Create a new instance of ConnectionShutdownException
            </summary>
    </member>
    <member name="M:DPSBase.ConnectionShutdownException.#ctor(System.String)">
      <summary>
            Create a new instance of ConnectionShutdownException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.ConnectionShutdownException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of ConnectionShutdownException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.ConnectionShutdownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.CommsSetupShutdownException">
      <summary>
            An error occured while trying to setup or shutdown NetworkCommsDotNet
            </summary>
    </member>
    <member name="M:DPSBase.CommsSetupShutdownException.#ctor">
      <summary>
            Create a new instance of CommsSetupShutdownException
            </summary>
    </member>
    <member name="M:DPSBase.CommsSetupShutdownException.#ctor(System.String)">
      <summary>
            Create a new instance of CommsSetupShutdownException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.CommsSetupShutdownException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of CommsSetupShutdownException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.CommsSetupShutdownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.CommunicationException">
      <summary>
            An error occured while during communication which does not fall under other exception cases.
            </summary>
    </member>
    <member name="M:DPSBase.CommunicationException.#ctor">
      <summary>
            Create a new instance of CommunicationException
            </summary>
    </member>
    <member name="M:DPSBase.CommunicationException.#ctor(System.String)">
      <summary>
            Create a new instance of CommunicationException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of CommunicationException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.UnexpectedPacketTypeException">
      <summary>
            An unexpected incoming packetType has been received. Consider setting NetworkComms.IgnoreUnknownPacketTypes to true to prevent this exception.
            </summary>
    </member>
    <member name="M:DPSBase.UnexpectedPacketTypeException.#ctor">
      <summary>
            Create a new instance of UnexpectedPacketTypeException
            </summary>
    </member>
    <member name="M:DPSBase.UnexpectedPacketTypeException.#ctor(System.String)">
      <summary>
            Create a new instance of UnexpectedPacketTypeException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.UnexpectedPacketTypeException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of UnexpectedPacketTypeException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.UnexpectedPacketTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.InvalidNetworkIdentifierException">
      <summary>
            An invalid network identifier has been provided.
            </summary>
    </member>
    <member name="M:DPSBase.InvalidNetworkIdentifierException.#ctor">
      <summary>
            Create a new instance of InvalidNetworkIdentifierException
            </summary>
    </member>
    <member name="M:DPSBase.InvalidNetworkIdentifierException.#ctor(System.String)">
      <summary>
            Create a new instance of InvalidNetworkIdentifierException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.InvalidNetworkIdentifierException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of InvalidNetworkIdentifierException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.InvalidNetworkIdentifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.DuplicateConnectionException">
      <summary>
            A possible duplicate connection has been detected.
            </summary>
    </member>
    <member name="M:DPSBase.DuplicateConnectionException.#ctor">
      <summary>
            Create a new instance of DuplicateConnectionException
            </summary>
    </member>
    <member name="M:DPSBase.DuplicateConnectionException.#ctor(System.String)">
      <summary>
            Create a new instance of DuplicateConnectionException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.DuplicateConnectionException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of DuplicateConnectionException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.DuplicateConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.ConnectionSendTimeoutException">
      <summary>
            A connection send has timed out.
            </summary>
    </member>
    <member name="M:DPSBase.ConnectionSendTimeoutException.#ctor">
      <summary>
            Create a new instance of ConnectionSendTimeoutException
            </summary>
    </member>
    <member name="M:DPSBase.ConnectionSendTimeoutException.#ctor(System.String)">
      <summary>
            Create a new instance of ConnectionSendTimeoutException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.ConnectionSendTimeoutException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of ConnectionSendTimeoutException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.ConnectionSendTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.PacketHandlerException">
      <summary>
            An error occured during a packetType data handler execution.
            </summary>
    </member>
    <member name="M:DPSBase.PacketHandlerException.#ctor">
      <summary>
            Create a new instance of PacketHandlerException
            </summary>
    </member>
    <member name="M:DPSBase.PacketHandlerException.#ctor(System.String)">
      <summary>
            Create a new instance of PacketHandlerException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
    </member>
    <member name="M:DPSBase.PacketHandlerException.#ctor(System.String,System.Exception)">
      <summary>
            Create a new instance of PacketHandlerException
            </summary>
      <param name="msg">A string containing useful information regarding the error</param>
      <param name="innerException">An associated inner exception</param>
    </member>
    <member name="M:DPSBase.PacketHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor required by the runtime and by .NET programming conventions
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="T:DPSBase.NullSerializer">
      <summary>
            Use only when serializing only primitive arrays. Will throw an exception otherwise
            </summary>
    </member>
    <member name="M:DPSBase.NullSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
      <inheritdoc />
    </member>
    <member name="M:DPSBase.NullSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
      <inheritdoc />
    </member>
    <member name="P:DPSBase.NullSerializer.Instance">
      <summary>
            Instance singleton used to access serializer instance.  Use instead <see cref="M:DPSBase.DPSManager.GetDataSerializer``1" /></summary>
    </member>
    <member name="T:DPSBase.ProtobufSerializer">
      <summary>
        <see cref="T:DPSBase.DataSerializer" /> using <see href="http://code.google.com/p/protobuf-net/">ProtoBuf-Net</see> to serialize an <see cref="T:System.Object" /> to bytes
            </summary>
    </member>
    <member name="M:DPSBase.ProtobufSerializer.SerialiseDataObjectInt(System.IO.Stream,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
      <inheritdoc />
    </member>
    <member name="M:DPSBase.ProtobufSerializer.DeserialiseDataObjectInt(System.IO.Stream,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
      <inheritdoc />
    </member>
    <member name="P:DPSBase.ProtobufSerializer.Instance">
      <summary>
            Instance singleton used to access <see cref="T:DPSBase.DataSerializer" /> instance.  Use instead <see cref="M:DPSBase.DPSManager.GetDataSerializer``1" /></summary>
    </member>
    <member name="T:DPSBase.RijndaelPSKEncrypter">
      <summary>
        <see cref="T:DPSBase.DataProcessor" /> which encrypts/decrypts data using the Rijndael algorithm and a pre-shared password
            </summary>
    </member>
    <member name="M:DPSBase.RijndaelPSKEncrypter.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
      <inheritdoc />
    </member>
    <member name="M:DPSBase.RijndaelPSKEncrypter.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
      <inheritdoc />
    </member>
    <member name="M:DPSBase.RijndaelPSKEncrypter.AddPasswordToOptions(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
      <summary>
            Adds a password, using the correct key, to a Dicitonary
            </summary>
      <param name="options">The Dictionary to add the optoion to</param>
      <param name="password">The password</param>
    </member>
    <member name="M:DPSBase.RijndaelPSKEncrypter.Dispose">
      <summary>
            Dispose of all resources.
            </summary>
    </member>
    <member name="T:DPSBase.StreamSendWrapper">
      <summary>
            Used to send all or parts of a stream. Particularly usefull for sending files directly from disk etc.
            </summary>
    </member>
    <member name="M:DPSBase.StreamSendWrapper.#ctor(DPSBase.ThreadSafeStream)">
      <summary>
            Create a new stream wrapper and set Start and Length to encompass the entire Stream
            </summary>
      <param name="stream">The underlying stream</param>
    </member>
    <member name="M:DPSBase.StreamSendWrapper.#ctor(DPSBase.ThreadSafeStream,System.Int64,System.Int64)">
      <summary>
            Create a new stream wrapper
            </summary>
      <param name="stream">The underlying stream</param>
      <param name="start">The start position from where to read data</param>
      <param name="length">The length to read</param>
    </member>
    <member name="M:DPSBase.StreamSendWrapper.MD5CheckSum">
      <summary>
            Return the MD5 for the specific part of the stream only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DPSBase.StreamSendWrapper.Dispose">
      <summary>
            Dispose the internal ThreadSafeStream
            </summary>
    </member>
    <member name="P:DPSBase.StreamSendWrapper.ThreadSafeStream">
      <summary>
            The wrapped stream
            </summary>
    </member>
    <member name="P:DPSBase.StreamSendWrapper.Start">
      <summary>
            The start position to read from Stream
            </summary>
    </member>
    <member name="P:DPSBase.StreamSendWrapper.Length">
      <summary>
            The number of bytes to read from Stream
            </summary>
    </member>
    <member name="T:DPSBase.StreamWriteWithTimeout">
      <summary>
            Wrapper class for writing to streams with timeouts. Used primarily to prevent stream write deadlocks.
            </summary>
    </member>
    <member name="F:DPSBase.StreamWriteWithTimeout.errorLocker">
      <summary>
            Locker for LogError() which ensures thread safe saves.
            </summary>
    </member>
    <member name="M:DPSBase.StreamWriteWithTimeout.Write(System.Byte[],System.Int32,System.IO.Stream,System.Int32,System.Double,System.Int32)">
      <summary>
            Write the provided sendbuffer to the destination stream in chunks of writeBufferSize. Throws exception if any write takes longer than timeoutPerByteWriteMS.
            </summary>
      <param name="sendBuffer">Buffer containing data to write</param>
      <param name="bufferLength">The number of bytes to write</param>
      <param name="destinationStream">The destination stream</param>
      <param name="writeBufferSize">The size in bytes of each successive write</param>
      <param name="timeoutMSPerKBWrite">The maximum time to allow for write to complete per KB</param>
      <param name="minTimeoutMS">The minimum time to allow for any sized write</param>
      <returns>The average time in milliseconds per KB written</returns>
    </member>
    <member name="M:DPSBase.StreamWriteWithTimeout.Write(System.IO.Stream,System.Int64,System.Int64,System.IO.Stream,System.Int32,System.Double,System.Int32)">
      <summary>
            Write the provided input stream to the destination stream in chunks of writeBufferSize. Throws exception if any write takes longer than timeoutPerByteWriteMS.
            </summary>
      <param name="inputStream">Input stream continaing data to send</param>
      <param name="inputStart">The start position in sendBuffer</param>
      <param name="inputLength">The number of bytes to write</param>
      <param name="destinationStream">The destination stream</param>
      <param name="writeBufferSize">The size in bytes of each successive write, recommended 8K</param>
      <param name="timeoutMSPerKBWrite">The maximum time to allow for write to complete per KB</param>
      <param name="minTimeoutMS">The minimum time to wait per write, this takes priority over other values.</param>
      <returns>The average time in milliseconds per KB written</returns>
    </member>
    <member name="M:DPSBase.StreamWriteWithTimeout.AppendStringToLogFile(System.String,System.String)">
      <summary>
            Appends the provided logString to end of fileName.txt. If the file does not exist it will be created.
            </summary>
      <param name="fileName">The filename to use. The extension .txt will be appended automatically</param>
      <param name="logString">The string to append.</param>
    </member>
    <member name="T:DPSBase.ThreadSafeStream">
      <summary>
            A wrapper around a stream to ensure it can be accessed in a thread safe way. The .net implementation of Stream.Synchronized is not suitable on its own.
            </summary>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.#ctor(System.IO.Stream)">
      <summary>
            Create a thread safe stream. Once any actions are complete the stream must be correctly disposed by the user.
            </summary>
      <param name="stream">The stream to make thread safe</param>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Create a thread safe stream.
            </summary>
      <param name="stream">The stream to make thread safe.</param>
      <param name="closeStreamAfterSend">If true the provided stream will be disposed once data has been written to the network. If false the stream must be disposed of correctly by the user</param>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.ToArray(System.Int32)">
      <summary>
            Returns data from entire Stream
            </summary>
      <param name="numberZeroBytesPrefex">If non zero will append N 0 value bytes to the start of the returned array</param>
      <returns>
      </returns>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.ToArray(System.Int64,System.Int64,System.Int32)">
      <summary>
            Returns data from the specified portion of Stream
            </summary>
      <param name="start">The start position of the desired bytes</param>
      <param name="length">The total number of desired bytes</param>
      <param name="numberZeroBytesPrefex">If non zero will append N 0 value bytes to the start of the returned array</param>
      <returns>
      </returns>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.MD5CheckSum">
      <summary>
            Return the MD5 hash of the current <see cref="T:DPSBase.ThreadSafeStream" /> as a string
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.MD5CheckSum(System.Int64,System.Int32)">
      <summary>
            Return the MD5 hash of part of the current <see cref="T:DPSBase.ThreadSafeStream" /> as a string
            </summary>
      <param name="start">The start position in the stream</param>
      <param name="length">The length of stream to MD5</param>
      <returns>
      </returns>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.MD5Stream(System.IO.Stream)">
      <summary>
            Calculate the MD5 of the provided stream
            </summary>
      <param name="streamToMD5">The stream to calcualte Md5 for</param>
      <returns>
      </returns>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.Write(System.Byte[],System.Int64)">
      <summary>
            Writes all provided data to the internal stream starting at the provided position with the stream
            </summary>
      <param name="data">
      </param>
      <param name="startPosition">
      </param>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.CopyTo(System.IO.Stream,System.Int64,System.Int64,System.Int32,System.Double,System.Int32)">
      <summary>
            Copies data specified by start and length properties from internal stream to the provided stream.
            </summary>
      <param name="destinationStream">The destination stream to write to</param>
      <param name="startPosition">
      </param>
      <param name="length">
      </param>
      <param name="writeBufferSize">The buffer size to use for copying stream contents</param>
      <param name="minTimeoutMS">The minimum time allowed for any sized copy</param>
      <param name="timeoutMSPerKBWrite">The timouts in milliseconds per KB to write</param>
      <returns>The average time in milliseconds per byte written</returns>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.Dispose">
      <summary>
            Call Dispose on the internal stream
            </summary>
    </member>
    <member name="M:DPSBase.ThreadSafeStream.Close">
      <summary>
            Call Close on the internal stream
            </summary>
    </member>
    <member name="P:DPSBase.ThreadSafeStream.CloseStreamAfterSend">
      <summary>
            If true the internal stream will be disposed once the data has been written to the network
            </summary>
    </member>
    <member name="P:DPSBase.ThreadSafeStream.Length">
      <summary>
            The total length of the internal stream
            </summary>
    </member>
    <member name="P:DPSBase.ThreadSafeStream.Position">
      <summary>
            The current position of the internal stream
            </summary>
    </member>
    <member name="T:SevenZipLZMACompressor.LZMACompressor">
      <summary>
            Compressor utilizing LZMA algorithm from <see href="http://www.7-zip.org/">7zip</see></summary>
    </member>
    <member name="M:SevenZipLZMACompressor.LZMACompressor.ForwardProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
      <inheritdoc />
    </member>
    <member name="M:SevenZipLZMACompressor.LZMACompressor.ReverseProcessDataStream(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int64@)">
      <inheritdoc />
    </member>
    <member name="P:SevenZipLZMACompressor.LZMACompressor.Instance">
      <summary>
            Instance singleton used to access <see cref="T:DPSBase.DataProcessor" /> instance.  Obsolete, use instead <see cref="M:DPSBase.DPSManager.GetDataProcessor``1" /></summary>
    </member>
    <member name="T:LZMA.InvalidParamException">
      <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
    </member>
    <member name="T:LZMA.CoderPropID">
      <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.DictionarySize">
      <summary>
            Specifies size of dictionary.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.UsedMemorySize">
      <summary>
            Specifies size of memory for PPM*.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.Order">
      <summary>
            Specifies order for PPM methods.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.PosStateBits">
      <summary>
            Specifies number of postion state bits for LZMA 
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.LitContextBits">
      <summary>
            Specifies number of literal context bits for LZMA 
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.LitPosBits">
      <summary>
            Specifies number of literal position bits for LZMA
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.NumFastBytes">
      <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.MatchFinder">
      <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.NumPasses">
      <summary>
            Specifies number of passes.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.Algorithm">
      <summary>
            Specifies number of algorithm.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.MultiThread">
      <summary>
            Specifies multithread mode.
            </summary>
    </member>
    <member name="F:LZMA.CoderPropID.EndMarker">
      <summary>
            Specifies mode with end marker.
            </summary>
    </member>
  </members>
</doc>